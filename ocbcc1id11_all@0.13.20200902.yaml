atomic_arrange_rule:
- {first_atomic_interface_id: OCBCC1ID11.bankcard.verify.request, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP, rule_name: ''}
- {first_atomic_interface_id: OCBCC1ID11.bankcard.verify.request, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY, rule_name: ''}
- {first_atomic_interface_id: OCBCC1ID11.bankcard.refund.query, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUNDQUERY, rule_name: ''}
- {first_atomic_interface_id: OCBCC1ID11.bankcard.payment.query, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENTQUERY, rule_name: ''}
- {first_atomic_interface_id: OCBCC1ID11.bankcard.refund.request, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, rule_name: ''}
- {first_atomic_interface_id: OCBCC1ID11.bankcard.payment.request, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT, rule_name: ''}
atomic_interface_condition:
- {atomic_interface_id: OCBCC1ID11.bankcard.otp.dana.send, condition: return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");, id: OCBCC1ID11.BANKCARD.BANKOTP.otp.send.id, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP, next_atomic_interface_id: ''}
- {atomic_interface_id: OCBCC1ID11.bankcard.verify.request, condition: 'if(!stringUtil.equals(OCBCC1ID11_bankcard_verify.bizStatus,"S99")) { return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");}', id: OCBCC1ID11.BANKCARD.BANKOTP.RETURN_AND_FINISH.id, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP, next_atomic_interface_id: OCBCC1ID11.bankcard.otp.dana.send}
- {atomic_interface_id: OCBCC1ID11.bankcard.verify.request, condition: 'if(stringUtil.equals(OCBCC1ID11_bankcard_verify.bizStatus,"S99")) { return conditionExpressUtil.buildSuccessResult("NEXT");}', id: OCBCC1ID11.BANKCARD.BANKOTP.NEXT.id, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP, next_atomic_interface_id: OCBCC1ID11.bankcard.otp.dana.send}
- {atomic_interface_id: FCFLUXNET.alipayplus.fluxnet.common.recovery, condition: 'if(stringUtil.equals(OCBCC1ID11_bankcard_refund.bizStatus,"S11")) { return conditionExpressUtil.buildSuccessResult("CONTINUE");}', id: OCBCC1ID11.BANKCARD.REFUND.recovery.continue, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, next_atomic_interface_id: OCBCC1ID11.bankcard.refund.request}
- {atomic_interface_id: FCFLUXNET.alipayplus.fluxnet.common.recovery, condition: 'if(!stringUtil.equals(OCBCC1ID11_bankcard_refund.bizStatus,"S11")) { return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");}', id: OCBCC1ID11.BANKCARD.REFUND.recovery.finish, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, next_atomic_interface_id: OCBCC1ID11.bankcard.refund.request}
- {atomic_interface_id: OCBCC1ID11.bankcard.otp.dana.send, condition: return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");, id: OCBCC1ID11.BANKCARD.VERIFY.otp.dana.send.RETURN_AND_FINISH, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY, next_atomic_interface_id: ''}
- {atomic_interface_id: OCBCC1ID11.bankcard.verify.request, condition: 'if(!stringUtil.equals(OCBCC1ID11_bankcard_verify.bizStatus,"S99")) { return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");}', id: OCBCC1ID11.BANKCARD.VERIFY.verify.request.RETURN_AND_FINISH, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY, next_atomic_interface_id: OCBCC1ID11.bankcard.otp.dana.send}
- {atomic_interface_id: OCBCC1ID11.bankcard.verify.request, condition: 'if(stringUtil.equals(OCBCC1ID11_bankcard_verify.bizStatus,"S99")) { return conditionExpressUtil.buildSuccessResult("NEXT");}', id: OCBCC1ID11.BANKCARD.VERIFY.verify.request.NEXT, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY, next_atomic_interface_id: OCBCC1ID11.bankcard.otp.dana.send}
- {atomic_interface_id: OCBCC1ID11.bankcard.refund.query, condition: return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");, id: OCBCC1ID11.BANKCARD.REFUNDQUERY.refund.query, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUNDQUERY, next_atomic_interface_id: ''}
- {atomic_interface_id: OCBCC1ID11.bankcard.payment.query, condition: return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");, id: OCBCC1ID11.BANKCARD.PAYMENTQUERY.payment.query, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENTQUERY, next_atomic_interface_id: ''}
- {atomic_interface_id: FCFLUXNET.alipayplus.fluxnet.common.recovery, condition: 'if(stringUtil.equals(OCBCC1ID11_bankcard_refund.bizStatus,"S11")) { return conditionExpressUtil.buildSuccessResult("NEXT");}', id: OCBCC1ID11.BANKCARD.REFUND.recovery, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, next_atomic_interface_id: OCBCC1ID11.bankcard.refund.request}
- {atomic_interface_id: FCFLUXNET.alipayplus.fluxnet.common.recon, condition: return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");, id: OCBCC1ID11.BANKCARD.REFUND.recon, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, next_atomic_interface_id: ''}
- {atomic_interface_id: OCBCC1ID11.bankcard.refund.query, condition: 'if(stringUtil.equals(OCBCC1ID11_bankcard_refund.bizStatus,"S07")||stringUtil.equals(OCBCC1ID11_bankcard_refund.bizStatus,"S08")) { return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");}', id: OCBCC1ID11.BANKCARD.REFUND.refund.query, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, next_atomic_interface_id: ''}
- {atomic_interface_id: OCBCC1ID11.bankcard.refund.request, condition: 'if(stringUtil.equals(OCBCC1ID11_bankcard_refund.bizStatus,"S07")||stringUtil.equals(OCBCC1ID11_bankcard_refund.bizStatus,"S08")) { return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");}', id: OCBCC1ID11.BANKCARD.REFUND.refund.request, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, next_atomic_interface_id: ''}
- {atomic_interface_id: FCFLUXNET.alipayplus.fluxnet.common.recovery, condition: return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");, id: OCBCC1ID11.BANKCARD.PAYMENT.recovery, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT, next_atomic_interface_id: ''}
- {atomic_interface_id: FCFLUXNET.alipayplus.fluxnet.common.recon, condition: return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");, id: OCBCC1ID11.BANKCARD.PAYMENT.recon, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT, next_atomic_interface_id: ''}
- {atomic_interface_id: OCBCC1ID11.bankcard.payment.query, condition: 'if(stringUtil.equals(OCBCC1ID11_bankcard_payment.bizStatus,"S07")||stringUtil.equals(OCBCC1ID11_bankcard_payment.bizStatus,"S08")) { return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");}', id: OCBCC1ID11.BANKCARD.PAYMENT.payment.query, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT, next_atomic_interface_id: ''}
- {atomic_interface_id: OCBCC1ID11.bankcard.payment.request, condition: 'if(stringUtil.equals(OCBCC1ID11_bankcard_payment.bizStatus,"S07")||stringUtil.equals(OCBCC1ID11_bankcard_payment.bizStatus,"S08")) { return conditionExpressUtil.buildSuccessResult("RETURN_AND_FINISH");}', id: OCBCC1ID11.BANKCARD.PAYMENT.payment.request, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT, next_atomic_interface_id: ''}
available_channel:
- {id: OCBCC1ID11.BANKCARD.BANKOTP, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP, inst_exchange_ability_name: OCBCC1ID11.BANKCARD.BANKOTP, route_rule_id: DEFAULT.BANKCARD.BANKOTP}
- {id: OCBCC1ID11.BANKCARD.VERIFY, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY, inst_exchange_ability_name: OCBCC1ID11.BANKCARD.VERIFY, route_rule_id: DEFAULT.BANKCARD.VERIFY}
- {id: OCBCC1ID11.BANKCARD.REFUNDQUERY, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUNDQUERY, inst_exchange_ability_name: OCBCC1ID11.BANKCARD.REFUNDQUERY, route_rule_id: DEFAULT.BANKCARD.REFUNDQUERY}
- {id: OCBCC1ID11.BANKCARD.PAYMENTQUERY, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENTQUERY, inst_exchange_ability_name: OCBCC1ID11.BANKCARD.PAYMENTQUERY, route_rule_id: DEFAULT.BANKCARD.PAYMENTQUERY}
- {id: OCBCC1ID11.BANKCARD.REFUND, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, inst_exchange_ability_name: OCBCC1ID11.BANKCARD.REFUND, route_rule_id: DEFAULT.BANKCARD.REFUND}
- {id: OCBCC1ID11.BANKCARD.PAYMENT, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT, inst_exchange_ability_name: OCBCC1ID11.BANKCARD.PAYMENT, route_rule_id: DEFAULT.BANKCARD.PAYMENT}
channel_attribute_def:
- {attribute_key: ATTR_DIRECT_DEBIT, attribute_name: isDirectDebit, error_code: AE11112060030127, error_message: filter by direct debit, physic_attr_key: IS_DIRECT_DEBIT, processor: directDebitProcessor, request_key: isDirectDebit, status: Y}
external_interface_map:
- {inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP, interface_id: OCBCC1ID11.bankcard.otp.dana.send}
- {inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP, interface_id: OCBCC1ID11.bankcard.verify.request}
- {inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY, interface_id: OCBCC1ID11.bankcard.otp.dana.send}
- {inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY, interface_id: OCBCC1ID11.bankcard.verify.request}
- {inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUNDQUERY, interface_id: OCBCC1ID11.bankcard.refund.query}
- {inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENTQUERY, interface_id: OCBCC1ID11.bankcard.payment.query}
- {inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, interface_id: OCBCC1ID11.bankcard.refund.request}
- {inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT, interface_id: OCBCC1ID11.bankcard.payment.request}
ffn_event:
- {ack_flux_interface_id: agcr.001.800.01, biz_category: PAYMENT, biz_direction: OUTGOING, debit_credit_flag: DEBIT, fc_event_code: '12068003', flux_event_code: agcr.001.800.01, flux_event_name: agcr.001.800.01, service_id: PAYMENT, sync_flag: ASYNC, tnt_inst_id: DANAW3ID}
- {ack_flux_interface_id: '', biz_category: VERIFY, biz_direction: OUTGOING, debit_credit_flag: DEBIT, fc_event_code: '12068001', flux_event_code: bkvf.001.800.01, flux_event_name: bkvf.001.800.01, service_id: VERIFY, sync_flag: SYNC, tnt_inst_id: DANAW3ID}
ffn_ext_event:
- {arrange_biz_status: '', biz_category: PAYMENT, biz_direction: INCOMING, debit_credit_flag: CREDIT, external_event_code: OCBCC1ID11.bankcard.recon.file, external_event_name: OCBCC1ID11.bankcard.recon.file, external_inst_id: OCBCC1ID, external_system_id: OCBCC1ID11, fc_event_code: '12068002', mop_id: '', sync_flag: ASYNC, tnt_inst_id: DANAW3ID}
- {arrange_biz_status: 'S07,S08', biz_category: PAYMENT, biz_direction: OUTGOING, debit_credit_flag: DEBIT, external_event_code: OCBCC1ID11.bankcard.payment, external_event_name: OCBCC1ID11.bankcard.payment, external_inst_id: OCBCC1ID, external_system_id: OCBCC1ID11, fc_event_code: '12068000', mop_id: '', sync_flag: ASYNC, tnt_inst_id: DANAW3ID}
- {arrange_biz_status: 'S07,S08,S11', biz_category: PAYMENT, biz_direction: OUTGOING, debit_credit_flag: CREDIT, external_event_code: OCBCC1ID11.bankcard.refund, external_event_name: OCBCC1ID11.bankcard.refund, external_inst_id: OCBCC1ID, external_system_id: OCBCC1ID11, fc_event_code: '12068000', mop_id: '', sync_flag: ASYNC, tnt_inst_id: DANAW3ID}
- {arrange_biz_status: 'S07,S08,S11', biz_category: PAYMENT, biz_direction: OUTGOING, debit_credit_flag: DEBIT, external_event_code: OCBCC1ID11.bankcard.query, external_event_name: OCBCC1ID11.bankcard.query, external_inst_id: OCBCC1ID, external_system_id: OCBCC1ID11, fc_event_code: '12068002', mop_id: '', sync_flag: ASYNC, tnt_inst_id: DANAW3ID}
- {arrange_biz_status: 'S07,S08,S99,S98,S09', biz_category: VERIFY, biz_direction: OUTGOING, debit_credit_flag: DEBIT, external_event_code: OCBCC1ID11.bankcard.verify, external_event_name: OCBCC1ID11.bankcard.verify, external_inst_id: OCBCC1ID, external_system_id: OCBCC1ID11, fc_event_code: '12068000', mop_id: '', sync_flag: ASYNC, tnt_inst_id: DANAW3ID}
ffn_ext_interface:
- {batch_flag: SINGLE_FILE, ex_msg_type_code: OCBCC1ID11.bankcard.recon.file, external_event_code: OCBCC1ID11.bankcard.recon.file, external_inst_id: OCBCC1ID11, external_interface_id: OCBCC1ID11.bankcard.recon.file, external_interface_name: OCBCC1ID11.bankcard.recon.file, external_system_id: OCBCC1ID11, gw_app_id: OCBCC1ID11, is_srcreq_message: 'true', mop_id: '', send_receive_flag: RECEIVE, status: Y, tnt_inst_id: DANAW3ID, unify_msg_definition_id: recp.001.800.01}
- {batch_flag: SINGLE_EXCHANGE_OAUTH, ex_msg_type_code: OCBCC1ID11.bankcard.payment.request, external_event_code: OCBCC1ID11.bankcard.payment, external_inst_id: OCBCC1ID11, external_interface_id: OCBCC1ID11.bankcard.payment.request, external_interface_name: OCBCC1ID11.bankcard.payment.request, external_system_id: OCBCC1ID11, gw_app_id: OCBCC1ID11, is_srcreq_message: 'true', mop_id: '', send_receive_flag: SEND, status: Y, tnt_inst_id: DANAW3ID, unify_msg_definition_id: ''}
- {batch_flag: SINGLE_EXCHANGE_OAUTH, ex_msg_type_code: OCBCC1ID11.bankcard.refund.request, external_event_code: OCBCC1ID11.bankcard.refund, external_inst_id: OCBCC1ID11, external_interface_id: OCBCC1ID11.bankcard.refund.request, external_interface_name: OCBCC1ID11.bankcard.refund.request, external_system_id: OCBCC1ID11, gw_app_id: OCBCC1ID11, is_srcreq_message: 'true', mop_id: '', send_receive_flag: SEND, status: Y, tnt_inst_id: DANAW3ID, unify_msg_definition_id: ''}
- {batch_flag: SINGLE_EXCHANGE_OAUTH, ex_msg_type_code: OCBCC1ID11.bankcard.query.request, external_event_code: OCBCC1ID11.bankcard.query, external_inst_id: OCBCC1ID11, external_interface_id: OCBCC1ID11.bankcard.payment.query, external_interface_name: OCBCC1ID11.bankcard.payment.query, external_system_id: OCBCC1ID11, gw_app_id: OCBCC1ID11, is_srcreq_message: 'true', mop_id: '', send_receive_flag: SEND, status: Y, tnt_inst_id: DANAW3ID, unify_msg_definition_id: ''}
- {batch_flag: SINGLE_EXCHANGE_OAUTH, ex_msg_type_code: OCBCC1ID11.bankcard.query.request, external_event_code: OCBCC1ID11.bankcard.query, external_inst_id: OCBCC1ID11, external_interface_id: OCBCC1ID11.bankcard.refund.query, external_interface_name: OCBCC1ID11.bankcard.refund.query, external_system_id: OCBCC1ID11, gw_app_id: OCBCC1ID11, is_srcreq_message: 'true', mop_id: '', send_receive_flag: SEND, status: Y, tnt_inst_id: DANAW3ID, unify_msg_definition_id: ''}
- {batch_flag: SINGLE_EXCHANGE_OAUTH, ex_msg_type_code: OCBCC1ID11.bankcard.verify.request, external_event_code: OCBCC1ID11.bankcard.verify, external_inst_id: OCBCC1ID11, external_interface_id: OCBCC1ID11.bankcard.verify.request, external_interface_name: OCBCC1ID11.bankcard.verify.request, external_system_id: OCBCC1ID11, gw_app_id: OCBCC1ID11, is_srcreq_message: 'true', mop_id: '', send_receive_flag: SEND, status: Y, tnt_inst_id: DANAW3ID, unify_msg_definition_id: ''}
- {batch_flag: SEND_OTP, ex_msg_type_code: OCBCC1ID11.bankcard.otp.dana.send, external_event_code: OCBCC1ID11.bankcard.verify, external_inst_id: OCBCC1ID11, external_interface_id: OCBCC1ID11.bankcard.otp.dana.send, external_interface_name: OCBCC1ID11.bankcard.otp.dana.send, external_system_id: OCBCC1ID11, gw_app_id: OCBCC1ID11, is_srcreq_message: 'true', mop_id: '', send_receive_flag: SEND, status: Y, tnt_inst_id: DANAW3ID, unify_msg_definition_id: ''}
- {batch_flag: SEND_OTP, ex_msg_type_code: OCBCC1ID11.bankcard.otp.dana.send, external_event_code: OCBCC1ID11.bankcard.verify, external_inst_id: OCBCC1ID11, external_interface_id: OCBCC1ID11.bankcard.otp.dana.send, external_interface_name: OCBCC1ID11.bankcard.otp.dana.send, external_system_id: OCBCC1ID11, gw_app_id: OCBCC1ID11, is_srcreq_message: 'true', mop_id: '', send_receive_flag: SEND, status: Y, tnt_inst_id: DANAW3ID, unify_msg_definition_id: ''}
ffn_interface:
- {contact: '', contact_name: '', flux_event_code: bkvf.001.800.01, flux_interface_id: bkvf.001.800.01, is_srcreq_message: 'true', send_receive_flag: RECEIVE, tnt_inst_id: DANAW3ID, unify_msg_category: COMMON, unify_msg_definition_id: bkvf.001.800.01}
- {contact: '', contact_name: '', flux_event_code: agcr.001.800.01, flux_interface_id: agcr.001.800.01, is_srcreq_message: 'true', send_receive_flag: RECEIVE, tnt_inst_id: DANAW3ID, unify_msg_category: COMMON, unify_msg_definition_id: agcr.001.800.01}
ffn_process_config:
- {interface_id: OCBCC1ID11.bankcard.recon.file, template_id: EX-PLUS-ASYNC-RECEIVE-IN-SRCREQ, tnt_inst_id: DANAW3ID}
- {interface_id: agcr.001.800.01, template_id: FLUX-PLUS-ASYNC-RECEIVE-OUT-SRCREQ-AGCR, tnt_inst_id: DANAW3ID}
- {interface_id: OCBCC1ID11.bankcard.payment.request, template_id: EX-PLUS-ASYNC-SEND-OUT-SRCREQ, tnt_inst_id: DANAW3ID}
- {interface_id: OCBCC1ID11.bankcard.refund.request, template_id: EX-PLUS-SYNC-SEND-OUT-SRCREQ, tnt_inst_id: DANAW3ID}
- {interface_id: OCBCC1ID11.bankcard.payment.query, template_id: EX-PLUS-SYNC-SEND-OUT-SRCREQ, tnt_inst_id: DANAW3ID}
- {interface_id: OCBCC1ID11.bankcard.refund.query, template_id: EX-PLUS-SYNC-SEND-OUT-SRCREQ, tnt_inst_id: DANAW3ID}
- {interface_id: bkvf.001.800.01, template_id: FLUX-PLUS-ASYNC-RECEIVE-OUT-SRCREQ-BKVF, tnt_inst_id: DANAW3ID}
- {interface_id: OCBCC1ID11.bankcard.recon.file, template_id: EX-PLUS-ASYNC-RECEIVE-IN-SRCREQ, tnt_inst_id: DANAW3ID}
ffn_registration_meta:
- {ext_info: '{"certId":"OCBC"}', inst_ability_code: OCBCC1ID11.BANKCARD.PAYMENT, registration_key: OCBC-DD-PAYMENT, request_matcher: '{"fluxEventCode":["apop.001.800.01"]}', tnt_inst_id: DANAW3ID}
- {ext_info: '{"certId":"OCBC"}', inst_ability_code: OCBCC1ID11.BANKCARD.REFUND, registration_key: OCBC-DD-PAYMENT, request_matcher: '{"fluxEventCode":["apor.001.800.01"]}', tnt_inst_id: DANAW3ID}
- {ext_info: '{"certId":"OCBC"}', inst_ability_code: OCBCC1ID11.BANKCARD.PAYMENTQUERY, registration_key: OCBC-DD-PAYMENT, request_matcher: '{"fluxEventCode":["recp.002.800.01"]}', tnt_inst_id: DANAW3ID}
- {ext_info: '{"certId":"OCBC"}', inst_ability_code: OCBCC1ID11.BANKCARD.REFUNDQUERY, registration_key: OCBC-DD-PAYMENT, request_matcher: '{"fluxEventCode":["recp.003.800.01"]}', tnt_inst_id: DANAW3ID}
ffn_return_code_assemble:
- {external_biz_status_code: A, external_return_code: 00000009, external_return_code_id: 00000009, external_return_desc: Accepted, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.recon.file, tnt_inst_id: DANAW3ID, unimsg_return_code: AE11112060000001}
- {external_biz_status_code: A, external_return_code: '00000010', external_return_code_id: '00000010', external_return_desc: Already accepted, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.recon.file, tnt_inst_id: DANAW3ID, unimsg_return_code: AE11112060000011}
ffn_return_code_parse:
- {external_return_code: '0005', external_return_code_id: '0005', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: DEFAULT, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000015}
- {external_return_code: '0030', external_return_code_id: '0030', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: DEFAULT, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030129}
- {external_return_code: 0096, external_return_code_id: 0096, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: DEFAULT, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S09, unimsg_return_code: AE11112060000015}
- {external_return_code: '0000', external_return_code_id: '0000', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.verify.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S99, unimsg_return_code: AE11112060000000}
- {external_return_code: '0014', external_return_code_id: '0014', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.verify.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030102}
- {external_return_code: '0054', external_return_code_id: '0054', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.verify.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030114}
- {external_return_code: '0057', external_return_code_id: '0057', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.verify.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030105}
- {external_return_code: '0116', external_return_code_id: '0116', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.verify.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030116}
- {external_return_code: 0118, external_return_code_id: 0118, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.verify.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030118}
- {external_return_code: '0000', external_return_code_id: '0000', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S07, unimsg_return_code: AE11112060000000}
- {external_return_code: '0001', external_return_code_id: '0001', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030114}
- {external_return_code: '0014', external_return_code_id: '0014', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030122}
- {external_return_code: '0051', external_return_code_id: '0051', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000401}
- {external_return_code: '0052', external_return_code_id: '0052', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030119}
- {external_return_code: '0053', external_return_code_id: '0053', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030119}
- {external_return_code: '0054', external_return_code_id: '0054', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030114}
- {external_return_code: '0057', external_return_code_id: '0057', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030123}
- {external_return_code: '0061', external_return_code_id: '0061', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030120}
- {external_return_code: '0062', external_return_code_id: '0062', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030117}
- {external_return_code: 0082, external_return_code_id: 0082, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S09, unimsg_return_code: AE11112060000015}
- {external_return_code: 0094, external_return_code_id: 0094, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000011}
- {external_return_code: '0402', external_return_code_id: '0402', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000507}
- {external_return_code: '0000', external_return_code_id: '0000', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S07, unimsg_return_code: AE11112060000000}
- {external_return_code: '0001', external_return_code_id: '0001', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030114}
- {external_return_code: '0014', external_return_code_id: '0014', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030122}
- {external_return_code: '0051', external_return_code_id: '0051', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000401}
- {external_return_code: '0052', external_return_code_id: '0052', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030119}
- {external_return_code: '0053', external_return_code_id: '0053', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030119}
- {external_return_code: '0057', external_return_code_id: '0057', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030123}
- {external_return_code: '0061', external_return_code_id: '0061', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030120}
- {external_return_code: '0062', external_return_code_id: '0062', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030117}
- {external_return_code: 0082, external_return_code_id: 0082, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S09, unimsg_return_code: AE11112060000015}
- {external_return_code: 0094, external_return_code_id: 0094, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000011}
- {external_return_code: '0402', external_return_code_id: '0402', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000507}
- {external_return_code: '0000', external_return_code_id: '0000', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S07, unimsg_return_code: AE11112060000000}
- {external_return_code: '0001', external_return_code_id: '0001', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030114}
- {external_return_code: '0052', external_return_code_id: '0052', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030119}
- {external_return_code: '0053', external_return_code_id: '0053', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030119}
- {external_return_code: '0062', external_return_code_id: '0062', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030117}
- {external_return_code: 0082, external_return_code_id: 0082, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S09, unimsg_return_code: AE11112060000015}
- {external_return_code: 0094, external_return_code_id: 0094, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000011}
- {external_return_code: '0303', external_return_code_id: '0303', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000406}
- {external_return_code: '0307', external_return_code_id: '0307', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030125}
- {external_return_code: 0308, external_return_code_id: 0308, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030120}
- {external_return_code: '0402', external_return_code_id: '0402', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S11, unimsg_return_code: AE11112060000507}
- {external_return_code: '0000', external_return_code_id: '0000', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S07, unimsg_return_code: AE11112060000000}
- {external_return_code: '0001', external_return_code_id: '0001', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030114}
- {external_return_code: '0052', external_return_code_id: '0052', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030119}
- {external_return_code: '0053', external_return_code_id: '0053', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030119}
- {external_return_code: '0062', external_return_code_id: '0062', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030117}
- {external_return_code: 0082, external_return_code_id: 0082, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S09, unimsg_return_code: AE11112060000015}
- {external_return_code: 0094, external_return_code_id: 0094, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000011}
- {external_return_code: '0303', external_return_code_id: '0303', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060000406}
- {external_return_code: '0307', external_return_code_id: '0307', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030125}
- {external_return_code: 0308, external_return_code_id: 0308, external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S08, unimsg_return_code: AE11112060030120}
- {external_return_code: '0402', external_return_code_id: '0402', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S11, unimsg_return_code: AE11112060000507}
- {external_return_code: '00', external_return_code_id: '00', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.otp.dana.send, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S07, unimsg_return_code: AE11112060000000}
- {external_return_code: '99', external_return_code_id: '99', external_return_desc: DEFAULT, external_system_id: OCBCC1ID11, id: '', interface_id: OCBCC1ID11.bankcard.otp.dana.send, tnt_inst_id: DANAW3ID, unimsg_biz_status_code: S99, unimsg_return_code: AE11112060000199}
ffn_serial_no_rule:
- {id: '', interface_id: DEFAULT, sender_bank_no: DANAW3ID, seq_name: SEQ_DANAW3ID16, serial_length: '20', serial_mode: '${DATETIME_yyyyMMdd}${SEQ_12}', serial_name: EXTERNAL_SERIAL_NO, system_id: OCBCC1ID11, tnt_inst_id: DANAW3ID}
ffn_serial_ref_rule:
- {id: '', interface_id: OCBCC1ID11.bankcard.payment.request, serial_ref_fields: 'UnifyCommonMessage.CommonBody.externalSystemId,UnifyCommonMessage.CommonBody.externalSerialNo', serial_ref_type: EX_BIZ_SERIAL, tnt_inst_id: DANAW3ID}
- {id: '', interface_id: OCBCC1ID11.bankcard.refund.request, serial_ref_fields: 'UnifyCommonMessage.CommonBody.externalSystemId,UnifyCommonMessage.CommonBody.externalSerialNo', serial_ref_type: EX_BIZ_SERIAL, tnt_inst_id: DANAW3ID}
ffn_unique_rule:
- {enable_status: Y, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unique_fields: 'UnifyCommonMessage.CommonBody.externalSystemId,UnifyCommonMessage.CommonBody.externalInterfaceId,UnifyCommonMessage.CommonBody.externalSerialNo', unique_type: EX_MSG_SEND}
- {enable_status: Y, id: '', interface_id: OCBCC1ID11.bankcard.payment.request, tnt_inst_id: DANAW3ID, unique_fields: 'UnifyCommonMessage.CommonBody.externalSystemId,UnifyCommonMessage.CommonBody.externalSerialNo', unique_type: EX_BIZ_SERIAL}
- {enable_status: Y, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unique_fields: 'UnifyCommonMessage.CommonBody.externalSystemId,UnifyCommonMessage.CommonBody.externalInterfaceId,UnifyCommonMessage.CommonBody.externalSerialNo', unique_type: EX_MSG_SEND}
- {enable_status: Y, id: '', interface_id: OCBCC1ID11.bankcard.refund.request, tnt_inst_id: DANAW3ID, unique_fields: 'UnifyCommonMessage.CommonBody.externalSystemId,UnifyCommonMessage.CommonBody.externalSerialNo', unique_type: EX_BIZ_SERIAL}
- {enable_status: Y, id: '', interface_id: OCBCC1ID11.bankcard.payment.query, tnt_inst_id: DANAW3ID, unique_fields: 'UnifyCommonMessage.CommonBody.externalSystemId,UnifyCommonMessage.CommonBody.externalInterfaceId,UnifyCommonMessage.CommonBody.externalSerialNo', unique_type: EX_MSG_SEND}
- {enable_status: Y, id: '', interface_id: OCBCC1ID11.bankcard.refund.query, tnt_inst_id: DANAW3ID, unique_fields: 'UnifyCommonMessage.CommonBody.externalSystemId,UnifyCommonMessage.CommonBody.externalInterfaceId,UnifyCommonMessage.CommonBody.externalSerialNo', unique_type: EX_MSG_SEND}
flux_batch_exchange_mapping:
- {exchange_rule_code: OCBCC1ID11.bankcard.recon.file, file_mapping_id: OCBCC1ID11.bankcard.recon.file_P001, mapping_id: OCBCC1ID11.bankcard.recon.file_P001, mapping_type: P, open_flag: Y, tnt_inst_id: DANAW3ID}
flux_batch_exchange_rule:
- {archive_rule_code: '', div_db_code: '350395227', exchange_cycle: '', exchange_rule_code: OCBCC1ID11.bankcard.recon.file, fc_event_code: '12068000', holidays_exchange: '', memo: '', open_flag: Y, open_trigger: '', operator_id: '', pc_template_id: PC_COMMON_INCOMING_REQUEST_TEMPLATE, rule_content: '', tnt_inst_id: DANAW3ID, trigger_id: ''}
flux_batch_rule_mapping:
- {mapping_content: '{"UnifyCommonMessage.CommonBody.tntInstId":"DANAW3ID","UnifyCommonMessage.CommonBody.externalEventCode":"OCBCC1ID11.bankcard.recon.file"}', mapping_type: EXCHANGE_TYPE, memo: '', open_flag: Y, operator_id: jiaqing, rule_code: OCBCC1ID11.bankcard.recon.file, rule_mapping_id: OCBCC1ID11.bankcard.recon.file_rule_mapping_id, tnt_inst_id: DANAW3ID, virtual_txn_type: COMMON_INCOMING_REQUEST}
flux_cons_collection_rule:
- {coll_expression: 'exchangeStatus=S09,S10;externalEventCode=OCBCC1ID11.bankcard.refund', coll_interval: '3', coll_strategy: FLUXNET_EX_SERIAL, coll_system: '', collect_template_id: OCBCC1ID11_bankcard_refund_request_coll, enable_status: Y, init_offset: '3', temlapte_name: OCBCC1ID11_bankcard_refund_request_coll, tnt_inst_id: DANAW3ID}
- {coll_expression: 'exchangeStatus=S09,S10;externalEventCode=OCBCC1ID11.bankcard.payment', coll_interval: '3', coll_strategy: FLUXNET_EX_SERIAL, coll_system: '', collect_template_id: OCBCC1ID11_bankcard_payment_request_coll, enable_status: Y, init_offset: '3', temlapte_name: OCBCC1ID11_bankcard_payment_request_coll, tnt_inst_id: DANAW3ID}
flux_cons_ctrl_model:
- {enable_status: Y, fc_event_code: '12068011', rule_desc: '', slip_biz_type: recoveryOut, slip_collect_id: OCBCC1ID11_bankcard_refund_request_coll, slip_ctrl_id: OCBCC1ID11_bankcard_refundquery, slip_dispatch_id: dana_prod_dispatch_def, slip_org_sub_biz_type: OCBCC1ID11.bankcard.refund, slip_pro_type: LOST_RECOVERY, slip_sub_biz_type: OCBCC1ID11.bankcard.refund.query, slip_sub_pro_type: '', slip_txn_id: prod_txn_recovery_01, slip_txn_param: 'recoverySystem=fcfluxnet;msgDefIdr=recp.003.800.01;externalInterfaceId=FCFLUXNET.alipayplus.fluxnet.common.recovery;origExternalInterfaceId=OCBCC1ID11.bankcard.refund.request;transType=REFUND;slipSucStatusCode=S07,S08,S11', tnt_inst_id: DANAW3ID}
- {enable_status: Y, fc_event_code: '12068011', rule_desc: '', slip_biz_type: recoveryIn, slip_collect_id: OCBCC1ID11_bankcard_payment_request_coll, slip_ctrl_id: OCBCC1ID11_bankcard_paymentquery, slip_dispatch_id: dana_prod_dispatch_def, slip_org_sub_biz_type: OCBCC1ID11.bankcard.payment, slip_pro_type: LOST_RECOVERY, slip_sub_biz_type: OCBCC1ID11.bankcard.payment.query, slip_sub_pro_type: '', slip_txn_id: prod_txn_recovery_01, slip_txn_param: 'recoverySystem=fcfluxnet;msgDefIdr=recp.002.800.01;externalInterfaceId=FCFLUXNET.alipayplus.fluxnet.common.recovery;origExternalInterfaceId=OCBCC1ID11.bankcard.payment.request;transType=PAYMENT;slipSucStatusCode=S07,S08', tnt_inst_id: DANAW3ID}
flux_cons_recon_rule:
- {dispatch_id: '', fc_event_code: '12068011', open_flag: Y, pc_template_id: '', recon_rule_code: OCBCC1ID11_recon_reconrule, recon_sub_rule_list: OCBCC1ID11.bankcard.payment.request, recon_type: '', rule_content: '{"UnifyCommonMessage.MsgHdr.MsgDefIdr":"recp.001.800.01","UnifyCommonMessage.CommonBody.tntInstId":"DANAW3ID","UnifyCommonMessage.CommonBody.externalEventCode":"OCBCC1ID11.bankcard.recon.file"}', tnt_inst_id: DANAW3ID}
flux_cons_recon_sub_rule:
- {extEventCode: OCBCC1ID11.bankcard.payment.request, incomingRecovery: '', properties: '{"instId":"CYBSC1ID","relTransactionType":"REFUND","relExternalEventCode":"OCBCC1ID11.bankcard.refund"}', reconAfterAction: PUBLISH_RECON_RESULT, reconFields: amount, reconSubRuleCode: OCBCC1ID11.bankcard.payment.request, recoveryAppId: '', recoveryInterfaceId: FCFLUXNET.alipayplus.fluxnet.common.recon, tntInstId: DANAW3ID, uniqueFields: fileRecordId}
flux_file_parse_mapping:
- {file_factory_code: OCBCC1ID11.bankcard.recon.file, file_mapping_id: OCBCC1ID11.bankcard.recon.file_P001, file_store_type: OSS, file_type: REQUEST_FILE, memo: '', open_flag: Y, operator_id: '', parse_type: TXT, tnt_inst_id: DANAW3ID}
gw_file_factory_communication:
- {charset: UTF-8, client_type: TR, file_factory_code: OCBCC1ID11.bankcard.recon.file, method_name: summary, timeout: '8000', unique_id: ifcfluxbatch, uri: 'localhost:12200', zone_type: ''}
- {charset: UTF-8, client_type: TR, file_factory_code: OCBCC1ID11.bankcard.recon.file, method_name: logic, timeout: '8000', unique_id: ifcfluxbatch, uri: 'localhost:12200', zone_type: ''}
gw_file_factory_config:
- {biz_type: '', channel_system_id: '', domain: '', encoding: UTF-8, file_exchange_code: '', file_factory_code: OCBCC1ID11.bankcard.recon.file, file_type: TXT, inst_channel_api: '', inst_id: '', operate_type: PARSE, out_biz_key: '', service_group: '', status: A, template_id: OCBCC1ID11_parse_recon}
gw_file_factory_platform_config:
- {collect_id: '', encoding: UTF-8, file_factory_code: OCBCC1ID11.bankcard.recon.file, persistence_type: OSS, slice_id: common_slice, task_id: common_task, task_instruction_rule: ''}
gw_file_factory_property:
- {file_factory_code: OCBCC1ID11.bankcard.recon.file, key_name: SWITCH_PARSE, value: FACTORY_PLATFORM}
- {file_factory_code: OCBCC1ID11.bankcard.recon.file, key_name: MAX_TASKS_PER_SECOND, value: '1'}
gw_file_factory_template:
- {context: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ProcessInfo>\n    <FileInfo>\n        <FileType>TXT</FileType>\n        <!--PANIN PAYMENT-->\n        <Encoding>utf-8</Encoding>\n    </FileInfo>\n    <ParserInfo>\n        <ContentStartLine>\n        </ContentStartLine>\n        <ContentLine>\n            <Filters>\n                <Filter name=\"FieldValueRegexFilter\">\n                    <Properties>\n                        <Property name=\"fieldIndex\">7</Property>\n                        <Property name=\"regexValue\"><![CDATA[S]]></Property>\n                        <Property name=\"needAlert\">true</Property>\n                    </Properties>\n                </Filter>\n            </Filters>\n            <ParserClass name=\"TxtSeparatorContentLineParser\">\n                <Properties>\n                    <Property name=\"separator\">,</Property>\n                </Properties>\n            </ParserClass>\n            <Validators>\n                <Validator name=\"FieldCountValidator\"\
    >\n                    <Properties>\n                        <Property name=\"fieldCount\">9</Property>\n                    </Properties>\n                </Validator>\n            </Validators>\n            <FieldMappings>\n\n                <!-- <FieldMapping fieldName=\"settleAmount\" index=\"3\">\n                    <Validators>\n                        <Validator name=\"NotEmptyValidator\"/>\n                        <Validator name=\"FieldValueTypeValidator\">\n                            <Properties>\n                                <Property name=\"expectedType\">Numeric</Property>\n                            </Properties>\n                        </Validator>\n                    </Validators>\n                </FieldMapping> -->\n\n                <FieldMapping fieldName=\"extSerialNo\" index=\"1\">\n                    <Validators>\n                        <Validator name=\"NotEmptyValidator\"/>\n                    </Validators>\n                </FieldMapping>\n\n    \
    \            <FieldMapping fieldName=\"transactionType\" index=\"2\">\n                    <Converters>\n                        <Converter name=\"RegexMappingFieldValueConverter\">\n                            <Properties>\n                                <Property name=\"regexToValueMap\"><![CDATA[{\"R\":\"REFUND\",\"P\":\"PAYMENT\"}]]></Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                </FieldMapping>\n\n\n                <FieldMapping fieldName=\"minusSymbol\" index=\"32\">\n                    <Converters>\n                        <Converter name=\"ConcatFieldValueConverter\">\n                            <Properties>\n                                <Property name=\"indexValues\">2</Property>\n                            </Properties>\n                        </Converter>\n                        <Converter name=\"RegexMappingChainFieldValueConverter\">\n                            <Properties>\n\
    \                                <Property name=\"regexToValueMap\">\n                                    <![CDATA[{ \"REFUND\": \"-\", \"PAYMENT\": \"\" }]]>\n                                </Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                </FieldMapping>\n\n\n                <FieldMapping fieldName=\"transAmount\" index=\"3\">\n                    <Converters>\n                        <Converter name=\"FieldValueReplaceConverter\">\n                            <Properties>\n                                <Property name=\"regex\">[()\\.,-]</Property>\n                                <Property name=\"replace\"></Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                    <Validators>\n                        <Validator name=\"NotEmptyValidator\"/>\n                        <Validator name=\"FieldValueTypeValidator\"\
    >\n                            <Properties>\n                                <Property name=\"expectedType\">Numeric</Property>\n                            </Properties>\n                        </Validator>\n                    </Validators>\n                </FieldMapping>\n\n                <FieldMapping fieldName=\"transCurrency\" index=\"34\">\n                    <Converters>\n                        <Converter name=\"FixedFieldConverter\">\n                            <Properties>\n                                <Property name=\"fieldValue\">360</Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                </FieldMapping>\n\n                <FieldMapping fieldName=\"unsignedfeeAmount\" index=\"4\">\n                    <Converters>\n                        <Converter name=\"FieldValueReplaceConverter\">\n                            <Properties>\n                                <Property name=\"\
    regex\">[()\\.,-]</Property>\n                                <Property name=\"replace\"></Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                </FieldMapping>\n\n                <FieldMapping fieldName=\"feeAmount\" index=\"36\">\n                    <Converters>\n                        <Converter name=\"ConcatFieldValueConverter\">\n                            <Properties>\n                                <Property name=\"indexValues\">32,4</Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                </FieldMapping>\n                <FieldMapping fieldName=\"feeCurrency\" index=\"37\">\n                    <Converters>\n                        <Converter name=\"FixedFieldConverter\">\n                            <Properties>\n                                <Property name=\"fieldValue\">360</Property>\n       \
    \                     </Properties>\n                        </Converter>\n                    </Converters>\n                </FieldMapping>\n\n                <FieldMapping fieldName=\"settleAmount\" index=\"5\">\n                    <Converters>\n                        <Converter name=\"FieldValueReplaceConverter\">\n                            <Properties>\n                                <Property name=\"regex\">[()\\.,-]</Property>\n                                <Property name=\"replace\"></Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                    <Validators>\n                        <Validator name=\"FieldValueTypeValidator\">\n                            <Properties>\n                                <Property name=\"expectedType\">Numeric</Property>\n                            </Properties>\n                        </Validator>\n                    </Validators>\n                </FieldMapping>\n\
    \n                <FieldMapping fieldName=\"currency\" index=\"38\">\n                    <Converters>\n                        <Converter name=\"FixedFieldConverter\">\n                            <Properties>\n                                <Property name=\"fieldValue\">360</Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                </FieldMapping>\n\n                <FieldMapping fieldName=\"resultStatus\" index=\"7\">\n                    <Converters>\n                        <Converter name=\"RegexMappingFieldValueConverter\">\n                            <Properties>\n                                <Property name=\"regexToValueMap\"><![CDATA[{\"S\":\"S07\",\"F\":\"S08\"}]]></Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                </FieldMapping>\n\n\n\n                <FieldMapping fieldName=\"instRegistrationKey\"\
    \ index=\"11\">\n                    <Converters>\n                        <Converter name=\"FixedFieldConverter\">\n                            <Properties>\n                                <Property name=\"fieldValue\">OCBC-DD-PAYMENT</Property>\n                            </Properties>\n                        </Converter>\n                    </Converters>\n                </FieldMapping>\n            </FieldMappings>\n        </ContentLine>\n    </ParserInfo>\n    <BizProcessInfo>\n        <MaxCountPerProcess>50000</MaxCountPerProcess>\n        <IgnoreError>\n            SYSTEM_ERROR,PARSE_CONTENT_LINE_FILTER_ERROR,PARSE_CONTENT_LINE_VALIDATOR_ERROR,PARSE_CONTENT_FIELD_VALIDATOR_ERROR,PARSE_CONTENT_FIELD_CONVERT_ERROR\n        </IgnoreError>\n    </BizProcessInfo>\n</ProcessInfo>", operate_type: PARSE, template_id: OCBCC1ID11_parse_recon, template_type: ''}
gw_oauth_third_client:
- {accessTokenApplyInterfaceId: OCBCC1ID11.bankcard.token.request, accessTokenApplyRedirectUri: '', appId: OCBCC1ID11, authCodeApplyInterfaceId: '', authCodeApplyRedirectUri: '', clientId: clientId, clientSecret: clientSecret, properties: '', scope: '', supportGrantTypeList: client_credentials, tokenRefreshInterfaceId: ''}
inst_exchange_ability_code:
- {biz_pattern_id: BANKCARD, close_code: '', close_message: '', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP, inst_id: OCBCC1ID, service_id: BANKOTP, status: Y}
- {biz_pattern_id: BANKCARD, close_code: '', close_message: '', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY, inst_id: OCBCC1ID, service_id: VERIFY, status: Y}
- {biz_pattern_id: BANKCARD, close_code: '', close_message: '', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUNDQUERY, inst_id: OCBCC1ID, service_id: REFUNDQUERY, status: Y}
- {biz_pattern_id: BANKCARD, close_code: '', close_message: '', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENTQUERY, inst_id: OCBCC1ID, service_id: PAYMENTQUERY, status: Y}
- {biz_pattern_id: BANKCARD, close_code: '', close_message: '', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND, inst_id: OCBCC1ID, service_id: REFUND, status: Y}
- {biz_pattern_id: BANKCARD, close_code: '', close_message: '', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT, inst_id: OCBCC1ID, service_id: PAYMENT, status: Y}
inst_exchange_ability_code_attr:
- {attr_code: DEFAULT, attr_key: CARD_TYPE, attr_value: DC, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP}
- {attr_code: DEFAULT, attr_key: SYNC_SERIAL_INTERFACE, attr_value: OCBCC1ID11.bankcard.verify.request, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP}
- {attr_code: DEFAULT, attr_key: NEED_SYNC_SERIAL, attr_value: 'true', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP}
- {attr_code: DEFAULT, attr_key: BANK_CODE, attr_value: '003', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP}
- {attr_code: DEFAULT, attr_key: BANK_NAME, attr_value: OCBC, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP}
- {attr_code: DEFAULT, attr_key: SUPPORT_INST, attr_value: OCBCC1ID, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP}
- {attr_code: DEFAULT, attr_key: SERVICE_TIME, attr_value: '00:00-24:00', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.BANKOTP}
- {attr_code: DEFAULT, attr_key: VERIFY_ELEMENT, attr_value: 'bankPhoneNo,ektp', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: SUPPORT_CARD_BIN, attr_value: '464584,531928,537940,518316,464584,518316,486399', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: CARD_TYPE, attr_value: DC, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: SYNC_SERIAL_INTERFACE, attr_value: OCBCC1ID11.bankcard.verify.request, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: NEED_SYNC_SERIAL, attr_value: 'true', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: IS_DIRECT_DEBIT, attr_value: 'true', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: BANK_CODE, attr_value: '003', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: BANK_NAME, attr_value: OCBC, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: SUPPORT_INST, attr_value: OCBCC1ID, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: SERVICE_TIME, attr_value: '00:00-24:00', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.VERIFY}
- {attr_code: DEFAULT, attr_key: SERVICE_TIME, attr_value: '00:00-24:00', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUNDQUERY}
- {attr_code: DEFAULT, attr_key: ORIGINAL_ABILITY_CODE, attr_value: OCBCC1ID11.BANKCARD.REFUND, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUNDQUERY}
- {attr_code: DEFAULT, attr_key: SERVICE_TIME, attr_value: '00:00-24:00', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENTQUERY}
- {attr_code: DEFAULT, attr_key: ORIGINAL_ABILITY_CODE, attr_value: OCBCC1ID11.BANKCARD.PAYMENT, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENTQUERY}
- {attr_code: DEFAULT, attr_key: SERVICE_TIME, attr_value: '00:00-24:00', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND}
- {attr_code: DEFAULT, attr_key: SUPPORT_INST, attr_value: OCBCC1ID, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND}
- {attr_code: DEFAULT, attr_key: REFUND_TIMEOUT, attr_value: 365D, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND}
- {attr_code: DEFAULT, attr_key: ORIGINAL_ABILITY_CODE, attr_value: OCBCC1ID11.BANKCARD.PAYMENT, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.REFUND}
- {attr_code: DEFAULT, attr_key: IS_DIRECT_DEBIT, attr_value: 'TRUE', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT}
- {attr_code: DEFAULT, attr_key: SUPPORT_PAY_MODE, attr_value: MOTO, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT}
- {attr_code: DEFAULT, attr_key: CARD_TYPE, attr_value: DC, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT}
- {attr_code: DEFAULT, attr_key: SUPPORT_COUNTRIES, attr_value: ID, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT}
- {attr_code: DEFAULT, attr_key: SUPPORT_INST, attr_value: OCBCC1ID, inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT}
- {attr_code: DEFAULT, attr_key: AMOUNT_EXTENT, attr_value: '[0,+)', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT}
- {attr_code: DEFAULT, attr_key: CURRENCY, attr_value: '360', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT}
- {attr_code: DEFAULT, attr_key: SERVICE_TIME, attr_value: '00:00-24:00', inst_exchange_ability_code: OCBCC1ID11.BANKCARD.PAYMENT}
lgw_app:
- {app_id: OCBCC1ID11, app_name: OCBCC1ID11, inst_id: OCBCC1ID11, tnt_inst_id: DANAW3ID}
lgw_app_interface_map:
- {app_id: OCBCC1ID11, biz_properties: '', cluster_id: '', communication_id: OCBCC1ID11_BANKCARD_TOKEN_REQUEST, ext_properties: '', interface_id: OCBCC1ID11.bankcard.token.request, is_enable: 'true', route_id: '', tnt_inst_id: DANAW3ID}
- {app_id: FILE_GATEWAY, biz_properties: '', cluster_id: '', communication_id: '', ext_properties: '', interface_id: OCBCC1ID11.bankcard.recon.file, is_enable: '1', route_id: '', tnt_inst_id: DANAW3ID}
- {app_id: OCBCC1ID11, biz_properties: '', cluster_id: '', communication_id: OCBCC1ID11_BANKCARD_REFUND_REQUEST, ext_properties: '', interface_id: OCBCC1ID11.bankcard.refund.request, is_enable: 'true', route_id: '', tnt_inst_id: DANAW3ID}
- {app_id: OCBCC1ID11, biz_properties: '', cluster_id: '', communication_id: OCBCC1ID11_BANKCARD_VERIFY_REQUEST, ext_properties: '', interface_id: OCBCC1ID11.bankcard.verify.request, is_enable: 'true', route_id: '', tnt_inst_id: DANAW3ID}
- {app_id: OCBCC1ID11, biz_properties: '', cluster_id: '', communication_id: OCBCC1ID11_BANKCARD_QUERY_REQUEST, ext_properties: '', interface_id: OCBCC1ID11.bankcard.query.request, is_enable: 'true', route_id: '', tnt_inst_id: DANAW3ID}
- {app_id: OCBCC1ID11, biz_properties: '', cluster_id: '', communication_id: OCBCC1ID11_BANKCARD_PAYMENT_REQUEST, ext_properties: '', interface_id: OCBCC1ID11.bankcard.payment.request, is_enable: 'true', route_id: '', tnt_inst_id: DANAW3ID}
lgw_communication:
- {communication_id: OCBCC1ID11_BANKCARD_TOKEN_REQUEST, connect_timeout: '8000', connection_type: CLIENT, interface_id: OCBCC1ID11.bankcard.token.request, properties: TNT_INST_ID=DANAW3ID;HTTP_TYPE=POST;SSL_PROTOCOL=TLSv1.2;, protocol: HTTP, read_timeout: '8000', recv_message_format: TEXT, send_message_format: TEXT, uri: 'http://finmock.tool.dana.id/mock/api/OCBCDDTokenRequest.htm'}
- {communication_id: OCBCC1ID11_BANKCARD_REFUND_REQUEST, connect_timeout: '8000', connection_type: CLIENT, interface_id: OCBCC1ID11.bankcard.refund.request, properties: TNT_INST_ID=DANAW3ID;HTTP_TYPE=POST;SSL_PROTOCOL=TLSv1.2;, protocol: HTTP, read_timeout: '8000', recv_message_format: TEXT, send_message_format: TEXT, uri: 'http://finmock.tool.dana.id/mock/api/OCBCDDRefund.htm'}
- {communication_id: OCBCC1ID11_BANKCARD_VERIFY_REQUEST, connect_timeout: '8000', connection_type: CLIENT, interface_id: OCBCC1ID11.bankcard.verify.request, properties: TNT_INST_ID=DANAW3ID;HTTP_TYPE=POST;SSL_PROTOCOL=TLSv1.2;, protocol: HTTP, read_timeout: '8000', recv_message_format: TEXT, send_message_format: TEXT, uri: 'http://finmock.tool.dana.id/mock/api/OCBCDDBankVerify.htm'}
- {communication_id: OCBCC1ID11_BANKCARD_QUERY_REQUEST, connect_timeout: '8000', connection_type: CLIENT, interface_id: OCBCC1ID11.bankcard.query.request, properties: TNT_INST_ID=DANAW3ID;HTTP_TYPE=POST;SSL_PROTOCOL=TLSv1.2;, protocol: HTTP, read_timeout: '8000', recv_message_format: TEXT, send_message_format: TEXT, uri: 'http://finmock.tool.dana.id/mock/api/OCBCDDQuery.htm'}
- {communication_id: OCBCC1ID11_BANKCARD_PAYMENT_REQUEST, connect_timeout: '8000', connection_type: CLIENT, interface_id: OCBCC1ID11.bankcard.payment.request, properties: TNT_INST_ID=DANAW3ID;HTTP_TYPE=POST;SSL_PROTOCOL=TLSv1.2;, protocol: HTTP, read_timeout: '8000', recv_message_format: TEXT, send_message_format: TEXT, uri: 'http://finmock.tool.dana.id/mock/api/OCBCDDPayment.htm'}
lgw_file_moving_config:
- {dest_config_id: OSS_COMMON, interface_id: OCBCC1ID11.bankcard.recon.file, moving_properties: exchange_type=BATCH_EXCHANGE;trigger_time=0200-23;unique_type=FILE_SRC_PATH_UNIQUE;check_source_exist=true;trans_daemon=true, process_units: '', src_config_id: SFTP_COMMON, tnt_inst_id: DANAW3ID}
lgw_file_path_config:
- {id: OCBCC1ID11.bankcard.recon.file, interface_id: OCBCC1ID11.bankcard.recon.file, source_file_entity: '/download/OCBCC1ID11/RECON/$${{{{REGEX_^DDSettlement({bizDate}\d{8}).*\.csv$}}}}$$}', target_file_entity: '', tnt_inst_id: DANAW3ID}
lgw_inst:
- {inst_id: OCBCC1ID11, inst_name: OCBCC1ID11}
lgw_interface:
- {apispi: spi, inner_system: '', interface_id: OCBCC1ID11.bankcard.token.request, interface_name: OCBCC1ID11.bankcard.token.request, is_enable: 'true', message_component: SCRIPT, message_process_id: OCBCC1ID11_BANKCARD_TOKEN_REQUEST, pc_id: SYNC_SEND_MESSAGE, properties: '', version: 1.0.0}
- {apispi: spi, inner_system: '', interface_id: OCBCC1ID11.bankcard.refund.request, interface_name: OCBCC1ID11.bankcard.refund.request, is_enable: 'true', message_component: SCRIPT, message_process_id: OCBCC1ID11_BANKCARD_REFUND_REQUEST, pc_id: SYNC_SEND_MESSAGE, properties: '', version: 1.0.0}
- {apispi: '', inner_system: '#fcfluxnet#', interface_id: OCBCC1ID11.bankcard.recon.file, interface_name: OCBCC1ID11.bankcard.recon.file, is_enable: 'true', message_component: '', message_process_id: '', pc_id: SIMPLE_MOVING, properties: process_type=MOVE, version: 1.0.0}
- {apispi: spi, inner_system: '', interface_id: OCBCC1ID11.bankcard.verify.request, interface_name: OCBCC1ID11.bankcard.verify.request, is_enable: 'true', message_component: SCRIPT, message_process_id: OCBCC1ID11_BANKCARD_VERIFY_REQUEST, pc_id: SYNC_SEND_MESSAGE, properties: '', version: 1.0.0}
- {apispi: spi, inner_system: '', interface_id: OCBCC1ID11.bankcard.query.request, interface_name: OCBCC1ID11.bankcard.query.request, is_enable: 'true', message_component: SCRIPT, message_process_id: OCBCC1ID11_BANKCARD_QUERY_REQUEST, pc_id: SYNC_SEND_MESSAGE, properties: '', version: 1.0.0}
- {apispi: spi, inner_system: '', interface_id: OCBCC1ID11.bankcard.payment.request, interface_name: OCBCC1ID11.bankcard.payment.request, is_enable: 'true', message_component: SCRIPT, message_process_id: OCBCC1ID11_BANKCARD_PAYMENT_REQUEST, pc_id: SYNC_SEND_MESSAGE, properties: '', version: 1.0.0}
lgw_message_process:
- {assemble_ext_template: '', assemble_sub_template: '', assemble_template: grant_type=client_credentials, assemble_type: TEXT, error_sub_template: '', error_template: '', header_template: "#set($clientId=$!kmsUtil.getCert(\"OCBC_CLIENT_ID-sec-key\",\"SYMMETRIC_KEY\",null))\n#set($clientSecret=$!kmsUtil.getCert(\"OCBC_CLIENT_SECRET-sec-key\",\"SYMMETRIC_KEY\",null))\n#set($rawString=$clientId + ':' + $clientSecret)\n#set($basicParam=$!coderUtil.base64Encode($rawString))\n<xml>\n    <map name=\"Authorization\">Basic $!basicParam</map>\n    <map name=\"Content-Type\">application/x-www-form-urlencoded</map>\n</xml>", message_process_id: OCBCC1ID11_BANKCARD_TOKEN_REQUEST, parser_class_name: OCBCTokenResponseParse, parser_template: "package com.alipay.fc.supergw.servicetest.groovy;\n\nimport com.alipay.fc.supergw.common.util.enums.SuperGatewayResultCode;\nimport com.alipay.supergwlite.components.common.exception.SupergwException;\nimport com.alipay.supergwlite.components.common.message.CompositeData;\n\
    import com.alipay.supergwlite.components.common.model.common.MessageEnvelope;\nimport com.alipay.supergwlite.components.message.exception.code.ParserErrorCode;\nimport com.alipay.supergwlite.components.message.parser.MessageParser;\nimport com.alipay.supergwlite.components.unimsg.UnifyCommonMessage;\nimport com.alipay.supergwlite.components.unimsg.UnifyMessage;\nimport com.alipay.supergwlite.components.unimsg.constant.BizStatusCode;\nimport net.sf.json.JSONObject;\nimport org.apache.commons.lang.StringUtils;\nimport org.codehaus.jackson.JsonFactory;\nimport org.codehaus.jackson.JsonNode;\nimport org.codehaus.jackson.JsonParser;\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Map;\n\npublic class OCBCTokenResponseParse implements MessageParser {\n\n    private final JsonFactory       jsonFactory     = new JsonFactory();\n    public static final String\
    \      ERROR_SCHEMA    = \"ErrorCode\";\n    protected static final Logger   logger          = LoggerFactory.getLogger(OCBCTokenResponseParse.class);\n\n    public UnifyMessage parse(MessageEnvelope messageEnvelope) {\n        UnifyCommonMessage unifyMsg = new UnifyCommonMessage();\n        try {\n            Object body = messageEnvelope.getContent();\n            Map<String, String> head = messageEnvelope.getExtraContent();\n            JsonNode jsonNode = parseToJson((String)body);\n            // validateParameters(jsonNode);\n            return createResponse(unifyMsg, jsonNode);\n        } catch (Exception e) {\n\n            unifyMsg.getCommonBody().addField(\"origPayload\", (String) messageEnvelope.getContent());\n            unifyMsg.getCommonBody().addField(\"origHeader\", JSONObject.fromObject(messageEnvelope.getExtraContent()).toString());\n\n            CompositeData resultInfoCompositeData = new CompositeData(\"resultInfo\");\n            resultInfoCompositeData.addField(\"\
    resultStatus\", BizStatusCode.FAIL.getCode());\n            resultInfoCompositeData.addField(\"resultCode\", SuperGatewayResultCode.UNKNOWN_EXCEPTION.getCode());\n            unifyMsg.getCommonBody().addCompositeData(null, resultInfoCompositeData);\n\n            logger.error(\"error parse: \"+ e.getMessage(), e);\n            return unifyMsg;\n        }\n    }\n\n    @Override\n    public void share(UnifyMessage responseMessage, UnifyMessage requestMessage) {\n\n    }\n\n    private void validateParameters(JsonNode jsonNode){\n\n        // Mandatory parameters regardless of the transaction result\n        ArrayList<String> mandatoryParams = new ArrayList<String>();\n        mandatoryParams.add(\"access_token\");\n        mandatoryParams.add(\"token_type\");\n        mandatoryParams.add(\"scope\");\n\n\n        if(jsonNode.findValue(ERROR_SCHEMA)==null){\n            StringBuilder errorMessages = new StringBuilder(validateMandatoryParameters(jsonNode, mandatoryParams));\n\n         \
    \   if (errorMessages.length() > 0) {\n                throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, errorMessages.toString());\n            }\n        }\n\n    }\n\n    /**\n     * Validate the mandatory parameters\n     *\n     * @param rootNode the parameter values\n     * @param keys     Array of mandatory parameters\n     * @return the resulting error messages\n     */\n    private String validateMandatoryParameters(JsonNode rootNode, ArrayList<String> keys) {\n\n        StringBuilder errorMessages = new StringBuilder();\n\n        for (String k : keys) {\n            if (rootNode.findValue(k) == null || StringUtils.isBlank(rootNode.findValue(k).getTextValue())) {\n                errorMessages.append(k).append(\" is missing or blank.\");\n            }\n        }\n\n        return errorMessages.toString();\n    }\n    /**\n     * use jackson to parse,  it will keep the original order of fields\n     *\n     * @param s\n     * @return\n     */\n    private JsonNode\
    \ parseToJson(String s) {\n        JsonParser parser = null;\n        JsonNode rootNode = null;\n        try {\n            parser = jsonFactory.createJsonParser(s);\n            rootNode = new ObjectMapper().readTree(parser);\n        } catch (IOException e) {\n\n            logger.error(\"illegal message format, \" + e.getMessage());\n            throw new SupergwException(ParserErrorCode.PARSE_ERROR, e);\n        }\n\n        return rootNode;\n    }\n\n    private UnifyCommonMessage createResponse(UnifyCommonMessage unifyMsg, JsonNode jsonNode) {\n        // for success\n        if(jsonNode.findValue(ERROR_SCHEMA)==null){\n            unifyMsg.getCommonBody().addField(\"accessToken\",jsonNode.get(\"access_token\").getTextValue());\n            unifyMsg.getCommonBody().addField(\"tokenType\",jsonNode.get(\"token_type\").getTextValue());\n            Integer expires = jsonNode.get(\"expires_in\").getIntValue();\n            unifyMsg.getCommonBody().addField(\"accessTokenExpireTime\"\
    ,String.valueOf(expires));\n            unifyMsg.getCommonBody().addField(\"scope\",jsonNode.get(\"scope\").getTextValue());\n\n\n            CompositeData resultInfoCompositeData = new CompositeData(\"externalResultInfo\");\n            resultInfoCompositeData.addField(\"resultCodeId\", \"00\");\n            resultInfoCompositeData.addField(\"resultStatus\", BizStatusCode.SUCCESS.getCode());\n            unifyMsg.getCommonBody().addCompositeData(null, resultInfoCompositeData);\n\n        }else{\n            CompositeData resultInfoCompositeData = new CompositeData(\"externalResultInfo\");\n            resultInfoCompositeData.addField(\"resultCodeId\", jsonNode.get(\"ErrorCode\").getTextValue());\n            resultInfoCompositeData.addField(\"resultStatus\", BizStatusCode.FAIL.getCode());\n            unifyMsg.getCommonBody().addCompositeData(null, resultInfoCompositeData);\n        }\n\n        CompositeData resultInfoCompositeData = new CompositeData(\"resultInfo\");\n        resultInfoCompositeData.addField(\"\
    resultStatus\", BizStatusCode.SUCCESS.getCode());\n        resultInfoCompositeData.addField(\"resultCode\", SuperGatewayResultCode.SUCCESS.getCode());\n        unifyMsg.getCommonBody().addCompositeData(null, resultInfoCompositeData);\n\n        return unifyMsg;\n    }\n\n}", validate_template: ''}
- {assemble_ext_template: '', assemble_sub_template: '', assemble_template: '#set($l=$!m.g(''exchangeAmount'').length() - 2)

    #set($amount=$!m.g(''exchangeAmount'').substring(0, $l))

    #set($certId=$!m.g(''registrationExtInfo.certId''))

    #set($payload=$jsonSfUtil.getJsonObject())

    #set($request=$jsonSfUtil.getJsonObject())

    #set($head=$jsonSfUtil.getJsonObject())

    #set($body=$jsonSfUtil.getJsonObject())

    #set($dummy=$head.put("version", "1.0.0"))

    #set($dummy=$head.put("instId", "DANA"))

    #set($dummy=$head.put("certId", $certId))

    #set($dummy=$head.put("channelSystemId", $!m.g("instId")))

    #set($dummy=$head.put("bizType", "SR"))

    #set($dummy=$body.put("transactionId", $!m.g("externalSerialNo")))

    #set($dummy=$body.put("transactionTime", $!m.g("externalMessageSendTime")))

    #set($dummy=$body.put("paymentTransactionId", $!m.g("origExternalSerialNo")))

    #set($dummy=$body.put("bankPaymentTransactionId", $!m.g("origReferenceNo")))

    #set($dummy=$body.put("amount", $amount))

    #set($dummy=$body.put("currency", $!m.g("exchangeCurrency")))

    ##

    #set($dummy=$request.put("head",$head))

    #set($dummy=$request.put("body",$body))

    #set($dummy=$payload.put("request",$request))

    #set($dummy=$payload.put("signature",''''))

    $!payload.toString()', assemble_type: TEXT, error_sub_template: '', error_template: '', header_template: "#set($appInterfaceMap=$supergwConfigUtil.getAppInterfaceMap($!m.g(\"appId\"), $!m.g(\"interfaceId\"), $!m.g(\"tntInstId\")))\n#set($communicationConfig=$supergwConfigUtil.getCommunicationConfig($appInterfaceMap.getCommunicaionId()))\n#set($uriString=$communicationConfig.getUri().getUrl())\n#set($path=$urlUtil.getURIObject($!uriString).getPath())\n#set($httpMethod='POST')\n#set($accessToken=$!m.g('accessToken'))\n#set($apiKey=$!kmsUtil.getCert(\"OCBC_REFUND_API_KEY-sec-key\",\"SYMMETRIC_KEY\",null))\n#set($apiSecret=$!kmsUtil.getCert(\"OCBC_REFUND_API_SECRET-sec-key\",\"SYMMETRIC_KEY\",null))\n#set($timestamp=$!commonDateUtil.getTimestampWithTimezoneFromUnimsg2())\n#set($timestamp2=$!commonDateUtil.transformDate($timestamp, \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ssXXX\"))\n#set($nonce=$!coderUtil.base64Encode($!dateUtil.getCurrentTimeMillis()))\n#set($hexPayload=$signatureUtil.digestHexSHA256($payload.toString()).toLowerCase())\n\
    #set($stringToSign=\"${nonce}:${apiKey}:${httpMethod}:${path}:${accessToken}:${hexPayload}:${timestamp2}\")\n#set($hmacValue=$signatureUtil.signWithHMACHex($stringToSign,$apiSecret))\n#set($signature=\"${apiKey}:${hmacValue}:${nonce}:${timestamp2}\")\n<xml>\n    <map name=\"Authorization\">Bearer $!accessToken</map>\n    <map name=\"content-type\">application/json</map>\n    <map name=\"X-OCBC-APIKey\">$!apiKey</map>\n    <map name=\"X-OCBC-Timestamp\">$!timestamp2</map>\n    <map name=\"X-OCBC-Signature\">$signatureUtil.encodeBase64($!signature)</map>\n    <map name=\"charset\">UTF-8</map>\n</xml>", message_process_id: OCBCC1ID11_BANKCARD_REFUND_REQUEST, parser_class_name: OCBCRefundResponseParse, parser_template: "/*\n  Alipay.com Inc.\n  Copyright (c) 2004-2017 All Rights Reserved.\n */\npackage com.alipay.fc.supergw.servicetest.groovy;\n\nimport com.alipay.fc.supergw.common.util.enums.SuperGatewayResultCode;\nimport com.alipay.fc.supergw.core.service.extension.common.GroovyDependencyServicePackage;\n\
    import com.alipay.fc.supergw.core.service.extension.common.JsonSfUtil;\nimport com.alipay.fc.supergw.core.service.extension.common.KMSUtil;\nimport com.alipay.fc.supergw.core.service.extension.common.SignatureUtil;\nimport com.alipay.supergwlite.components.common.exception.SupergwException;\nimport com.alipay.supergwlite.components.common.message.CompositeData;\nimport com.alipay.supergwlite.components.common.message.SupergwMessage;\nimport com.alipay.supergwlite.components.message.exception.code.ParserErrorCode;\nimport com.alipay.supergwlite.components.message.parser.MessageParser;\nimport com.alipay.supergwlite.components.message.parser.TextMessageParser;\nimport com.alipay.supergwlite.components.unimsg.UnifyCommonMessage;\nimport com.alipay.supergwlite.components.unimsg.UnifyMessage;\nimport com.alipay.supergwlite.components.unimsg.constant.BizStatusCode;\nimport net.sf.json.JSONObject;\nimport org.apache.commons.lang.StringUtils;\nimport org.codehaus.jackson.JsonNode;\nimport org.slf4j.Logger;\n\
    import org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * parser for the response of direct debit OCBC refund\n *\n *\n *{\n \"response\": {\n \"head\": {\n \"bizType\": \"SR\",\n \"certId\": \"1234567890\",\n \"channelSystemId\": \"BANK01\",\n \"instId\": \"DANA\",\n \"version\": \"1.0.0\"\n },\n \"body\": {\n \"amount\": \"888888000\",\n \"bankPaymentTransactionId\": \"2017110137898657\",\n \"bankTransactionId\": \"201711018656673130\",\n \"currency\": \"IDR\",\n \"desc\": \"Refund success\",\n \"errorCode\": \"0000\",\n \"extension\": \"\",\n \"paymentTransactionId\": \"20171023971479871\",\n \"resultStatus\": \"00\",\n \"transactionId\": \"20171101000000002\",\n \"transactionTime\": \"20171102103028\"\n }\n },\n \"signature\": \"signature string\"\n }\n *\n *\n *\n * @author hongyuan.why\n * @version $Id: OCBCPaymentResponseParse.java, v 0.1 Dec 17, 2017 9:57:00 PM hongyuan.why Exp $\n */\npublic class OCBCRefundResponseParse extends TextMessageParser\
    \ {\n\n    protected static final Logger logger          = LoggerFactory.getLogger(OCBCRefundResponseParse.class);\n    static final String HTTP_STATUS_CODE = \"_httpStatusCode\";\n\n\n    @Override\n    protected UnifyMessage parse(String s) {\n        UnifyCommonMessage unifyCommonMessage = new UnifyCommonMessage();\n        unifyCommonMessage.getCommonBody().addField(\"origPayload\", s);\n        String _httpStatusCode = this.getMessageEnvelope().getExtraContent().get(HTTP_STATUS_CODE);\n        unifyCommonMessage.getCommonBody().addField(HTTP_STATUS_CODE, _httpStatusCode);\n        try {\n            JSONObject rootNode = JSONObject.fromObject(s);\n            // verifySignature(rootNode);\n            validateParameters(rootNode);\n            addResponse(unifyCommonMessage, rootNode);\n\n        } catch (SupergwException sgwe){\n            logger.error(\"error in parse\", sgwe);\n            CompositeData compositeData = new CompositeData(\"externalResultInfo\");\n           \
    \ compositeData.addField(\"resultCodeId\", sgwe.getErrorCode().getCode());\n            compositeData.addField(\"resultMsg\", sgwe.getMessage());\n\n        } catch (Exception e) {\n            logger.error(\"error in parse\", e);\n            CompositeData compositeData = new CompositeData(\"externalResultInfo\");\n            compositeData.addField(\"resultCodeId\", ParserErrorCode.SYSTEM_ERROR.getCode());\n            compositeData.addField(\"resultMsg\", e.getMessage());\n\n        } finally {\n            if(\"401\".equals(_httpStatusCode)) {\n                CompositeData resultInfoData = new CompositeData(\"resultInfo\");\n                resultInfoData.addField(\"resultStatus\", BizStatusCode.UNAUTHORIZED.getCode());\n                resultInfoData.addField(\"resultCode\", SuperGatewayResultCode.UNAUTHORIZED.getCode());\n                unifyCommonMessage.getCommonBody().addCompositeData(null,resultInfoData);\n            } else {\n                CompositeData resultInfoData\
    \ = new CompositeData(\"resultInfo\");\n                resultInfoData.addField(\"resultStatus\", BizStatusCode.SUCCESS.getCode());\n                resultInfoData.addField(\"resultCode\", SuperGatewayResultCode.SUCCESS.getCode());\n                unifyCommonMessage.getCommonBody().addCompositeData(null,resultInfoData);\n            }\n\n            return unifyCommonMessage;\n        }\n    }\n\n\n\n    /**\n     * verify repsone signature\n     * @param jsonNode\n     */\n    private void verifySignature(JsonNode jsonNode){\n        boolean result = false;\n        try {\n            String certId = jsonNode.get(\"response\").get(\"head\").get(\"certId\").getTextValue();\n            KMSUtil kmsUtil = GroovyDependencyServicePackage.g(KMSUtil.class);\n            String publicKey = kmsUtil.getCert(certId+\"_SPI_KEY-pub-key\", \"PUBLIC_KEY\", null);\n\n            SignatureUtil signatureUtil = GroovyDependencyServicePackage.g(SignatureUtil.class);\n            result = signatureUtil.verify(jsonNode,\
    \ publicKey, \"response\");\n\n        } catch (Exception e) {\n            throw new SupergwException(ParserErrorCode.VERIFY_ERROR, \"verify signature error \" + e.getMessage());\n        }\n\n        if (!result) {\n            throw new SupergwException(ParserErrorCode.VERIFY_ERROR, \"invalid signature\");\n        }\n    }\n\n\n    /**\n     * Validate the parameters from HTTP response\n     * @param rootNode the HTTP request parameters\n     */\n    private void validateParameters (JSONObject rootNode) {\n        JSONObject responseObject = rootNode.getJSONObject(\"response\");\n\n        JSONObject headObject = responseObject.getJSONObject(\"head\");\n        JSONObject bodyObject = responseObject.getJSONObject(\"body\");\n\n        // Mandatory parameters regardless of the transaction result\n        List<String> mandatoryParams = new ArrayList<String>();\n\n        mandatoryParams.add(\"version\");\n        mandatoryParams.add(\"instId\");\n        mandatoryParams.add(\"certId\"\
    );\n        mandatoryParams.add(\"channelSystemId\");\n        mandatoryParams.add(\"bizType\");\n        mandatoryParams.add(\"transactionId\");\n        mandatoryParams.add(\"transactionTime\");\n        mandatoryParams.add(\"paymentTransactionId\");\n        mandatoryParams.add(\"bankPaymentTransactionId\");\n        mandatoryParams.add(\"amount\");\n        mandatoryParams.add(\"resultStatus\");\n        mandatoryParams.add(\"errorCode\");\n\n\n\n        // Mandatory parameters that only exist in successful transactions\n        if (bodyObject.get(\"resultStatus\") != null && \"00\".equals(bodyObject.getString(\"resultStatus\"))) {\n            mandatoryParams.add(\"bankTransactionId\");\n        }\n\n        StringBuilder errorMessages = new StringBuilder(validateMandatoryParameters(rootNode, mandatoryParams));\n\n        // Validate other special paramters\n        if (!\"SR\".equals(headObject.optString(\"bizType\"))) {\n            errorMessages.append(\"bizType must be \\\"\
    SR\\\".\");\n        }\n\n        if (bodyObject.get(\"amount\") == null || StringUtils.isBlank(bodyObject.optString(\"amount\"))\n                || !bodyObject.optString(\"amount\").matches(\"([1-9]\\\\d*)\")) {\n            errorMessages.append(\"amount must be an integer.\");\n        }\n\n        // Set response code and error message\n        if (errorMessages.length() > 0) {\n            throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, errorMessages.toString());\n        }\n    }\n\n    /**\n     * Validate the mandatory parameters\n     * @param rootNode the parameter values\n     * @param keys Array of mandatory parameters\n     * @return the resulting error messages\n     */\n    private String validateMandatoryParameters(JSONObject rootNode, List<String> keys) {\n\n        JsonSfUtil jsonSfUtil = GroovyDependencyServicePackage.g(JsonSfUtil.class);\n        JSONObject flattened = jsonSfUtil.flatten(rootNode);\n        StringBuilder errorMessages = new StringBuilder();\n\
    \n        for (String key : keys) {\n            if (!flattened.has(key)) {\n                errorMessages.append(key).append(\" is missing or blank.\");\n            }\n        }\n\n\n        return errorMessages.toString();\n    }\n\n    /**\n     * convert external fileds to internal fileds\n     * @param jsonObject\n     * @return\n     */\n    private void addResponse(UnifyCommonMessage unifyMsg, JSONObject jsonObject){\n        try {\n\n            JSONObject responseObject = jsonObject.getJSONObject(\"response\");\n\n            JSONObject headObject = responseObject.getJSONObject(\"head\");\n            JSONObject bodyObject = responseObject.getJSONObject(\"body\");\n\n            // Add the fields into UnifyMessage\n            SupergwMessage body = unifyMsg.getCommonBody();\n\n            body.addField(\"externalEventCode\", \"OCBCC1ID11.bankcard.refund\");\n            body.addField(\"externalInterfaceId\", \"OCBCC1ID11.bankcard.refund.request\");\n            body.addField(\"\
    tntInstId\", \"DANAW3ID\");\n            body.addField(\"externalSerialNo\", bodyObject.getString(\"transactionId\"));\n            body.addField(\"externalSystemId\", \"OCBCC1ID11\");\n            body.addField(\"exchangeAmount\", bodyObject.getString(\"amount\") + \"00\");\n            body.addField(\"exchangeCurrency\", bodyObject.getString(\"currency\"));\n            body.addField(\"referenceNo\", bodyObject.optString(\"bankTransactionId\"));\n\n\n            for (Object key: bodyObject.keySet()) {\n                body.addField((String) key, (String) bodyObject.get(key));\n            }\n\n            CompositeData externalResultInfo = new CompositeData(\"externalResultInfo\");\n            externalResultInfo.addField(\"resultCodeId\", bodyObject.getString(\"errorCode\"));\n            externalResultInfo.addField(\"resultStatus\", bodyObject.getString(\"resultStatus\"));\n            externalResultInfo.addField(\"resultMsg\", bodyObject.optString(\"desc\"));\n\n            body.addCompositeData(null,\
    \ externalResultInfo);\n\n        } catch (Exception e){\n            throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, e);\n        }\n    }\n\n\n    /**\n     * @see MessageParser#share(UnifyMessage, UnifyMessage)\n     */\n    @Override\n    public void share(UnifyMessage responseMessage, UnifyMessage requestMessage) {\n\n        UnifyCommonMessage unifyCommonMessage = (UnifyCommonMessage)responseMessage;\n\n        try {\n\n            String requestTransactionId = ((UnifyCommonMessage)requestMessage).getCommonBody().g(\"externalSerialNo\");\n            String responseTransactionId = ((UnifyCommonMessage)responseMessage).getCommonBody().g(\"transactionId\");\n\n            if (responseTransactionId == null || !responseTransactionId.equals(requestTransactionId)) {\n                throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, \"transactionId in request and response do not match.\");\n            }\n\n            String requestAmount = ((UnifyCommonMessage)requestMessage).getCommonBody().g(\"\
    exchangeAmount\");\n            String responseAmount = ((UnifyCommonMessage)responseMessage).getCommonBody().g(\"exchangeAmount\");\n\n            if (responseAmount == null || !responseAmount.equals(requestAmount)) {\n                throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, \"amount in request and response do not match.\");\n            }\n\n        } catch (SupergwException sgwe){\n            logger.error(\"error in share\", sgwe);\n            if(unifyCommonMessage.getCommonBody().go(\"externalResultInfo\") == null) {\n                CompositeData compositeData = new CompositeData(\"externalResultInfo\");\n                compositeData.addField(\"resultCodeId\", sgwe.getErrorCode().getCode());\n                compositeData.addField(\"resultMsg\", sgwe.getMessage());\n                unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\n            }\n\n\n        } catch (Exception e) {\n            logger.error(\"error in share\", e);\n\
    \            if(unifyCommonMessage.getCommonBody().go(\"externalResultInfo\") == null) {\n                CompositeData compositeData = new CompositeData(\"externalResultInfo\");\n                compositeData.addField(\"resultCodeId\", ParserErrorCode.SYSTEM_ERROR.getCode());\n                compositeData.addField(\"resultMsg\", e.getMessage());\n                unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\n            }\n        }\n    }\n\n}", validate_template: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xml>\n    <field class=\"String\" name=\"externalSerialNo\"  note=\"externalSerialNo\">\n        <validator name=\"requiredstring\">\n            <message>${note} can not be empty</message>\n        </validator>\n        <validator name=\"length\">\n            <param name=\"maxLength\">32</param>\n            <message>${note} maxLength is ${maxLength}</message>\n        </validator>\n    </field>\n    <field class=\"String\" name=\"externalMessageSendTime\"\
    \ note=\"externalMessageSendTime\">\n        <validator name=\"requiredstring\">\n            <message>${note} can not be empty</message>\n        </validator>\n        <validator name=\"date\">\n            <param name=\"format\">yyyyMMddHHmmss</param>\n            <message>${note} invalid format, should be ${format} </message>\n        </validator>\n    </field>\n    <field  class=\"String\" name=\"exchangeAmount\" note=\"exchangeAmount\">\n        <validator name=\"requiredstring\">\n            <message>${note} can not be empty</message>\n        </validator>\n        <validator name=\"money\">\n            <param name=\"greaterThanOrEqualTo\">100</param>\n            <message>${note} must greater than ${greaterThanOrEqualTo}</message>\n        </validator>\n        <validator name=\"regex\">\n            <param name=\"expression\">^[1-9]\\d*$</param>\n            <message>>${note} invalid number format</message>\n        </validator>\n    </field>\n    <field class=\"String\" name=\"\
    exchangeCurrency\" note=\"exchangeCurrency\">\n        <validator name=\"requiredstring\">\n            <message>${note} can not be empty</message>\n        </validator>\n        <validator name=\"equal\">\n            <param name=\"value\">IDR</param>\n            <message>${note} must be ${value}</message>\n        </validator>\n    </field>\n    <field class=\"String\" name=\"registrationExtInfo.certId\" note=\"registrationExtInfo.certId\">\n        <validator name=\"requiredstring\">\n            <message>${note} can not be empty</message>\n        </validator>\n    </field>\n    <field class=\"String\" name=\"instId\" note=\"instId\">\n        <validator name=\"requiredstring\">\n            <message>${note} can not be empty</message>\n        </validator>\n    </field>\n    <field class=\"String\" name=\"origReferenceNo\" note=\"origReferenceNo\">\n        <validator name=\"requiredstring\">\n            <message>${note} can not be empty</message>\n        </validator>\n    </field>\n\
    \    <field class=\"String\" name=\"origExternalSerialNo\" note=\"origExternalSerialNo\">\n        <validator name=\"requiredstring\">\n            <message>${note} can not be empty</message>\n        </validator>\n    </field>\n\n</xml>"}
- {assemble_ext_template: '', assemble_sub_template: '', assemble_template: "#set($token=$!m.g(\"payerCardCacheToken\"))\r\n#set($cardInfo=$!cardCenterUtil.queryCardInfoByToken($token))\r\n#set($bankCardType=$!cardInfo.cardType)\r\n#set($bankCardNo=$!cardInfo.cardNo)\r\n#set($extendInfo=$!cardInfo.extendInfo)\r\n#set($expiryYear=$!extendInfo.get('cardExpireYear'))\r\n#set($expiryMonth=$!extendInfo.get('cardExpireMonth'))\r\n###\r\n##if($sensitive==\"true\")\r\n##set($bankCardNo=\"*********\")\r\n##set($expiryYear=\"****\")\r\n##set($expiryMonth=\"**\")\r\n##end\r\n###\r\n#set($additionalVerifyElements=$!m.g(\"additionalVerifyElements\"))\r\n#set($additionalVerifyElements=$!jsonUtil.unEscapeJson($additionalVerifyElements))\r\n#set($additionalVerifyElements=$!jsonUtil.getJsonObject($additionalVerifyElements))\r\n#set($mobilePhone=$additionalVerifyElements.getString(\"mobilePhone\"))\r\n#set($mobilePhone=$!stringUtil.replace($mobilePhone,\"-\",\"\"))\r\n#set($acctName=$!additionalVerifyElements.getString(\"\
    accountName\"))\r\n#set($acctName=$!stringUtil.defaultIfBlank($acctName, \"\"))\r\n#set($birthDate=$!additionalVerifyElements.getString(\"dateOfBirth\"))\r\n#set($birthDate=$!stringUtil.defaultIfBlank($birthDate,\"\"))\r\n#set($bankpin=$!additionalVerifyElements.getString(\"bankPin\"))\r\n#set($bankpin=$!stringUtil.defaultIfBlank($bankpin, \"\"))\r\n#set($extension=$additionalVerifyElements.getString(\"extension\"))\r\n#set($extension=$!stringUtil.defaultIfBlank($extension, \"\"))\r\n#set($ektp=$additionalVerifyElements.getString(\"ektp\"))\r\n#set($ektp=$!stringUtil.defaultIfBlank($ektp, \"\"))\r\n##\r\n#if($ektp==\"\")\r\n#set($idType=\"\")\r\n#else\r\n#set($idType=\"03\")\r\n#end\r\n##\r\n#set($certId='OCBC')\r\n#set($payload=$jsonSfUtil.getJsonObject())\r\n#set($request=$jsonSfUtil.getJsonObject())\r\n#set($head=$jsonSfUtil.getJsonObject())\r\n#set($body=$jsonSfUtil.getJsonObject())\r\n#set($dummy=$head.put(\"version\", \"1.0.0\"))\r\n#set($dummy=$head.put(\"instId\", \"DANA\"))\r\
    \n#set($dummy=$head.put(\"certId\", $certId))\r\n#set($dummy=$head.put(\"channelSystemId\", \"OCBCC1ID\"))\r\n#set($dummy=$head.put(\"bizType\", \"CV\"))\r\n#set($dummy=$body.put(\"transactionId\", $!m.g(\"externalSerialNo\")))\r\n#set($dummy=$body.put(\"transactionTime\", $!m.g(\"externalMessageSendTime\")))\r\n#set($dummy=$body.put(\"idType\", $idType))\r\n#set($dummy=$body.put(\"idNo\", $ektp))\r\n#set($dummy=$body.put(\"accountName\", $!acctName))\r\n#set($dummy=$body.put(\"dateOfBirth\", $!birthDate))\r\n#set($dummy=$body.put(\"bankPin\", $bankpin))\r\n#set($dummy=$body.put(\"mobilePhone\", $mobilePhone))\r\n#set($dummy=$body.put(\"extension\", $extension))\r\n#set($dummy=$body.put(\"bankCardType\", $bankCardType))\r\n#set($dummy=$body.put(\"bankCardNo\", $bankCardNo))\r\n#set($dummy=$body.put(\"expiryYear\", $expiryYear))\r\n#set($dummy=$body.put(\"expiryMonth\",  $expiryMonth))\r\n#set($dummy=$request.put(\"head\",$head))\r\n#set($dummy=$request.put(\"body\",$body))\r\n#set($dummy=$payload.put(\"\
    request\",$request))\r\n#set($dummy=$payload.put(\"signature\",''))\r\n$!payload.toString()", assemble_type: TEXT, error_sub_template: '', error_template: '', header_template: "#set($appInterfaceMap=$supergwConfigUtil.getAppInterfaceMap($!m.g(\"appId\"), $!m.g(\"interfaceId\"), $!m.g(\"tntInstId\")))\r\n#set($communicationConfig=$supergwConfigUtil.getCommunicationConfig($appInterfaceMap.getCommunicaionId()))\r\n#set($uriString=$communicationConfig.getUri().getUrl())\r\n#set($path=$urlUtil.getURIObject($!uriString).getPath())\r\n#set($httpMethod='POST')\r\n#set($accessToken=$!m.g('accessToken'))\r\n#set($apiKey=$!kmsUtil.getCert(\"OCBC_VALIDATION_API_KEY-sec-key\",\"SYMMETRIC_KEY\",null))\r\n#set($apiSecret=$!kmsUtil.getCert(\"OCBC_VALIDATION_API_SECRET-sec-key\",\"SYMMETRIC_KEY\",null))\r\n#set($timestamp=$!commonDateUtil.getTimestampWithTimezoneFromUnimsg2())\r\n#set($timestamp2=$!commonDateUtil.transformDate($timestamp, \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ssXXX\"\
    ))\r\n#set($nonce=$!coderUtil.base64Encode($!dateUtil.getCurrentTimeMillis()))\r\n#set($hexPayload=$signatureUtil.digestHexSHA256($payload.toString()).toLowerCase())\r\n#set($stringToSign=\"${nonce}:${apiKey}:${httpMethod}:${path}:${accessToken}:${hexPayload}:${timestamp2}\")\r\n#set($hmacValue=$signatureUtil.signWithHMACHex($stringToSign,$apiSecret))\r\n#set($signature=\"${apiKey}:${hmacValue}:${nonce}:${timestamp2}\")\r\n<xml>\r\n    <map name=\"Authorization\">Bearer $!accessToken</map>\r\n    <map name=\"content-type\">application/json</map>\r\n    <map name=\"X-OCBC-APIKey\">$!apiKey</map>\r\n    <map name=\"X-OCBC-Timestamp\">$!timestamp2</map>\r\n    <map name=\"X-OCBC-Signature\">$signatureUtil.encodeBase64($!signature)</map>\r\n    <map name=\"charset\">UTF-8</map>\r\n</xml>", message_process_id: OCBCC1ID11_BANKCARD_VERIFY_REQUEST, parser_class_name: OCBCBankcardVerifyResponseParse, parser_template: "/*\r\n  Alipay.com Inc.\r\n  Copyright (c) 2004-2017 All Rights Reserved.\r\
    \n */\r\npackage com.alipay.fc.supergw.servicetest.groovy;\r\n\r\nimport com.alipay.fc.supergw.common.util.enums.SuperGatewayResultCode;\r\nimport com.alipay.fc.supergw.core.service.extension.common.GroovyDependencyServicePackage;\r\nimport com.alipay.fc.supergw.core.service.extension.common.KMSUtil;\r\nimport com.alipay.fc.supergw.core.service.extension.common.SignatureUtil;\r\nimport com.alipay.supergwlite.components.common.exception.SupergwException;\r\nimport com.alipay.supergwlite.components.common.exception.util.AssertUtil;\r\nimport com.alipay.supergwlite.components.common.message.CompositeData;\r\nimport com.alipay.supergwlite.components.common.message.SupergwMessage;\r\nimport com.alipay.supergwlite.components.message.exception.code.ParserErrorCode;\r\nimport com.alipay.supergwlite.components.message.parser.MessageParser;\r\nimport com.alipay.supergwlite.components.message.parser.TextMessageParser;\r\nimport com.alipay.supergwlite.components.unimsg.UnifyCommonMessage;\r\nimport\
    \ com.alipay.supergwlite.components.unimsg.UnifyMessage;\r\nimport com.alipay.supergwlite.components.unimsg.constant.BizStatusCode;\r\nimport net.sf.json.JSONObject;\r\nimport org.codehaus.jackson.JsonNode;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n/**\r\n * parser for the response of Maybank MiGS moto requests\r\n *\r\n * @author kaiji.ykj\r\n * @version $Id: OCBCBankcardVerifyResponsePares.java, v 0.1 Dec 17, 2017 9:57:00 PM rick.lijiaqi Exp $\r\n */\r\npublic class OCBCBankcardVerifyResponseParse extends TextMessageParser {\r\n\r\n    protected static final Logger logger = LoggerFactory.getLogger(OCBCBankcardVerifyResponseParse.class);\r\n    static final String HTTP_STATUS_CODE = \"_httpStatusCode\";\r\n\r\n    @Override\r\n    protected UnifyMessage parse(String s) {\r\n        UnifyCommonMessage unifyCommonMessage = new UnifyCommonMessage();\r\n        unifyCommonMessage.getCommonBody().addField(\"origPayload\", s);\r\n        String _httpStatusCode\
    \ = this.getMessageEnvelope().getExtraContent().get(HTTP_STATUS_CODE);\r\n        unifyCommonMessage.getCommonBody().addField(HTTP_STATUS_CODE, _httpStatusCode);\r\n        try {\r\n            JSONObject rootNode = JSONObject.fromObject(s);\r\n            // verifySignature(rootNode);\r\n            addResponse(unifyCommonMessage, rootNode);\r\n\r\n        } catch (SupergwException sgwe){\r\n            logger.error(\"error in parse\", sgwe);\r\n            CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n            compositeData.addField(\"resultCodeId\", sgwe.getErrorCode().getCode());\r\n            compositeData.addField(\"resultMsg\", sgwe.getMessage());\r\n            unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n\r\n        } catch (Exception e) {\r\n            logger.error(\"error in parse\", e);\r\n            CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n            compositeData.addField(\"\
    resultCodeId\", ParserErrorCode.SYSTEM_ERROR.getCode());\r\n            compositeData.addField(\"resultMsg\", e.getMessage());\r\n            unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n\r\n        } finally {\r\n\r\n            if(\"401\".equals(_httpStatusCode)) {\r\n                CompositeData resultInfoData = new CompositeData(\"resultInfo\");\r\n                resultInfoData.addField(\"resultStatus\", BizStatusCode.UNAUTHORIZED.getCode());\r\n                resultInfoData.addField(\"resultCode\", SuperGatewayResultCode.UNAUTHORIZED.getCode());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null,resultInfoData);\r\n            } else {\r\n                CompositeData resultInfoData = new CompositeData(\"resultInfo\");\r\n                resultInfoData.addField(\"resultStatus\", BizStatusCode.SUCCESS.getCode());\r\n                resultInfoData.addField(\"resultCode\", SuperGatewayResultCode.SUCCESS.getCode());\r\n   \
    \             unifyCommonMessage.getCommonBody().addCompositeData(null,resultInfoData);\r\n            }\r\n\r\n            return unifyCommonMessage;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * verify repsone signature\r\n     * @param jsonNode\r\n     */\r\n    private void verifySignature(JsonNode jsonNode){\r\n        boolean result = false;\r\n        try {\r\n            String certId = jsonNode.get(\"response\").get(\"head\").get(\"certId\").getTextValue();\r\n            KMSUtil kmsUtil = GroovyDependencyServicePackage.g(KMSUtil.class);\r\n            String publicKey = kmsUtil.getCert(certId+\"_SPI_KEY-pub-key\", \"PUBLIC_KEY\", null);\r\n\r\n            SignatureUtil signatureUtil = GroovyDependencyServicePackage.g(SignatureUtil.class);\r\n            result = signatureUtil.verify(jsonNode, publicKey, \"response\");\r\n\r\n        } catch (Exception e) {\r\n            throw new SupergwException(ParserErrorCode.VERIFY_ERROR, \"verify signature error \" + e.getMessage());\r\
    \n        }\r\n\r\n        if (!result) {\r\n            throw new SupergwException(ParserErrorCode.VERIFY_ERROR, \"invalid signature\");\r\n        }\r\n    }\r\n\r\n\r\n    private void addResponse(UnifyCommonMessage unifyMsg, JSONObject jsonObject){\r\n\r\n        try {\r\n            JSONObject responseObject = jsonObject.getJSONObject(\"response\");\r\n\r\n            JSONObject headObject = responseObject.getJSONObject(\"head\");\r\n            JSONObject bodyObject = responseObject.getJSONObject(\"body\");\r\n\r\n            // Add the fields into UnifyMessage\r\n            SupergwMessage body = unifyMsg.getCommonBody();\r\n\r\n            body.addField(\"transactionId\", bodyObject.getString(\"transactionId\"));\r\n            String bankToken = bodyObject.optString(\"bankCardToken\");\r\n            body.addField(\"bankToken\", bankToken);\r\n            body.addField(\"bankTokenExpiryDate\", bodyObject.optString(\"cardTokenExpiryDate\"));\r\n\r\n\r\n            CompositeData\
    \ compositeData = new CompositeData(\"externalResultInfo\");\r\n            compositeData.addField(\"resultCodeId\", bodyObject.getString(\"errorCode\"));\r\n            compositeData.addField(\"resultMsg\", bodyObject.getString(\"desc\"));\r\n\r\n            body.addCompositeData(null, compositeData);\r\n\r\n        } catch (Exception e) {\r\n            throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, e);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @see MessageParser#share(UnifyMessage, UnifyMessage)\r\n     */\r\n    @Override\r\n    public void share(UnifyMessage responseMessage, UnifyMessage requestMessage) {\r\n        UnifyCommonMessage unifyCommonMessage = (UnifyCommonMessage)responseMessage;\r\n        try {\r\n            String requestTransactionId = ((UnifyCommonMessage)requestMessage).getCommonBody().g(\"externalSerialNo\");\r\n            String responseTransactionId = ((UnifyCommonMessage)responseMessage).getCommonBody().g(\"transactionId\");\r\n\
    \r\n            if (responseTransactionId == null || !responseTransactionId.equals(requestTransactionId)) {\r\n                throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, \"transactionId in request and response do not match.\");\r\n            }\r\n\r\n        } catch (SupergwException sgwe){\r\n            logger.error(\"error in share\", sgwe);\r\n            if(unifyCommonMessage.getCommonBody().go(\"externalResultInfo\") == null) {\r\n                CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n                compositeData.addField(\"resultCodeId\", sgwe.getErrorCode().getCode());\r\n                compositeData.addField(\"resultMsg\", sgwe.getMessage());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n            }\r\n\r\n\r\n        } catch (Exception e) {\r\n            logger.error(\"error in share\", e);\r\n            if(unifyCommonMessage.getCommonBody().go(\"externalResultInfo\"\
    ) == null) {\r\n                CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n                compositeData.addField(\"resultCodeId\", ParserErrorCode.SYSTEM_ERROR.getCode());\r\n                compositeData.addField(\"resultMsg\", e.getMessage());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n            }\r\n        }\r\n    }\r\n\r\n}", validate_template: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xml>\r\n    <field class=\"String\" name=\"externalSerialNo\" note=\"transactionId\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} is Empty</message>\r\n        </validator>\r\n    </field>\r\n\r\n    <field class=\"String\" name=\"additionalVerifyElements.mobilePhone\" note=\"mobilePhone\">\r\n        <validator name=\"requiredstring\">\r\n            <message>mobilePhone Empty</message>\r\n        </validator>\r\n    </field>\r\n</xml>"}
- {assemble_ext_template: '', assemble_sub_template: '', assemble_template: "##\r\n#if($!m.g(\"transType\")==\"PAYMENT\")\r\n#set($inquiredTransactionType=\"P\")\r\n#else\r\n#set($inquiredTransactionType=\"R\")\r\n#end\r\n##\r\n##\r\n#set($certId=$!m.g('registrationExtInfo.certId'))\r\n#set($payload=$jsonSfUtil.getJsonObject())\r\n#set($request=$jsonSfUtil.getJsonObject())\r\n#set($head=$jsonSfUtil.getJsonObject())\r\n#set($body=$jsonSfUtil.getJsonObject())\r\n#set($dummy=$head.put(\"version\", \"1.0.0\"))\r\n#set($dummy=$head.put(\"instId\", \"DANA\"))\r\n#set($dummy=$head.put(\"certId\", $certId))\r\n#set($dummy=$head.put(\"channelSystemId\", $!m.g(\"instId\")))\r\n#set($dummy=$head.put(\"bizType\", \"STQ\"))\r\n#set($dummy=$body.put(\"transactionId\", $!m.g(\"externalSerialNo\")))\r\n#set($dummy=$body.put(\"transactionTime\", $!m.g(\"externalMessageSendTime\")))\r\n#set($dummy=$body.put(\"inquiredTransactionType\", $!inquiredTransactionType))\r\n#set($dummy=$body.put(\"inquiredTransactionId\"\
    , $!m.g(\"origExternalSerialNo\")))\r\n#set($dummy=$body.put(\"extension\", \"\"))\r\n##\r\n#set($dummy=$request.put(\"head\",$head))\r\n#set($dummy=$request.put(\"body\",$body))\r\n#set($dummy=$payload.put(\"request\",$request))\r\n#set($dummy=$payload.put(\"signature\",''))\r\n$!payload.toString()", assemble_type: TEXT, error_sub_template: '', error_template: '', header_template: "#set($appInterfaceMap=$supergwConfigUtil.getAppInterfaceMap($!m.g(\"appId\"), $!m.g(\"interfaceId\"), $!m.g(\"tntInstId\")))\r\n#set($communicationConfig=$supergwConfigUtil.getCommunicationConfig($appInterfaceMap.getCommunicaionId()))\r\n#set($uriString=$communicationConfig.getUri().getUrl())\r\n#set($path=$urlUtil.getURIObject($!uriString).getPath())\r\n#set($httpMethod='POST')\r\n#set($accessToken=$!m.g('accessToken'))\r\n#set($apiKey=$!kmsUtil.getCert(\"OCBC_STATUS_API_KEY-sec-key\",\"SYMMETRIC_KEY\",null))\r\n#set($apiSecret=$!kmsUtil.getCert(\"OCBC_STATUS_API_SECRET-sec-key\",\"SYMMETRIC_KEY\",null))\r\
    \n#set($timestamp=$!commonDateUtil.getTimestampWithTimezoneFromUnimsg2())\r\n#set($timestamp2=$!commonDateUtil.transformDate($timestamp, \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ssXXX\"))\r\n#set($nonce=$!coderUtil.base64Encode($!dateUtil.getCurrentTimeMillis()))\r\n#set($hexPayload=$signatureUtil.digestHexSHA256($payload.toString()).toLowerCase())\r\n#set($stringToSign=\"${nonce}:${apiKey}:${httpMethod}:${path}:${accessToken}:${hexPayload}:${timestamp2}\")\r\n#set($hmacValue=$signatureUtil.signWithHMACHex($stringToSign,$apiSecret))\r\n#set($signature=\"${apiKey}:${hmacValue}:${nonce}:${timestamp2}\")\r\n<xml>\r\n    <map name=\"Authorization\">Bearer $!accessToken</map>\r\n    <map name=\"content-type\">application/json</map>\r\n    <map name=\"X-OCBC-APIKey\">$!apiKey</map>\r\n    <map name=\"X-OCBC-Timestamp\">$!timestamp2</map>\r\n    <map name=\"X-OCBC-Signature\">$signatureUtil.encodeBase64($!signature)</map>\r\n    <map name=\"charset\">UTF-8</map>\r\n</xml>", message_process_id: OCBCC1ID11_BANKCARD_QUERY_REQUEST,
  parser_class_name: OCBCQueryResponseParse, parser_template: "/*\r\n  Alipay.com Inc.\r\n  Copyright (c) 2004-2017 All Rights Reserved.\r\n */\r\npackage com.alipay.fc.supergw.servicetest.groovy;\r\n\r\nimport com.alipay.fc.supergw.common.util.enums.SuperGatewayResultCode;\r\nimport com.alipay.fc.supergw.core.service.extension.common.GroovyDependencyServicePackage;\r\nimport com.alipay.fc.supergw.core.service.extension.common.JsonSfUtil;\r\nimport com.alipay.fc.supergw.core.service.extension.common.KMSUtil;\r\nimport com.alipay.fc.supergw.core.service.extension.common.SignatureUtil;\r\nimport com.alipay.supergwlite.components.common.exception.SupergwException;\r\nimport com.alipay.supergwlite.components.common.message.CompositeData;\r\nimport com.alipay.supergwlite.components.common.message.SupergwMessage;\r\nimport com.alipay.supergwlite.components.message.exception.code.ParserErrorCode;\r\nimport com.alipay.supergwlite.components.message.parser.MessageParser;\r\nimport com.alipay.supergwlite.components.message.parser.TextMessageParser;\r\
    \nimport com.alipay.supergwlite.components.unimsg.UnifyCommonMessage;\r\nimport com.alipay.supergwlite.components.unimsg.UnifyMessage;\r\nimport com.alipay.supergwlite.components.unimsg.constant.BizStatusCode;\r\nimport net.sf.json.JSONObject;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.codehaus.jackson.JsonNode;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * parser for the response of direct debit OCBC query\r\n *\r\n * *\r\n {\r\n \"response\":{\r\n \"head\":{\r\n \"version\":\"1.0.0\",\r\n \"instId\":\"DANA\",\r\n \"certId\":\"1234567890\",\r\n \"channelSystemId\":\"BANK01\",\r\n \"bizType\":\"STQ\"\r\n },\r\n \"body\":{\r\n \"transactionId\":\"20171023971479871\",\r\n \"transactionTime\":\"20171102103028\",\r\n \"inquiredTransactionType\":\"P\",\r\n \"inquiredTransactionId\":\"201711018656673130\",\r\n \"inquiredBankTransactionId\":\"201711018656673130\",\r\n \"inquiredCurrency\"\
    :\"IDR\",\r\n \"inquiredAmount\":\"888888000\",\r\n \"inquiredBankCardNo\":\"1234567890\",\r\n \"inquiredTransactionStatus\":\"0000\",\r\n \"inquiredTransactionTime\":\"201710234628\",\r\n \"extension\":\"\"\r\n }\r\n },\r\n \"signature\":\"signature string\"\r\n }\r\n *\r\n *\r\n *\r\n * @author kaiji.ykj\r\n * @version $Id: OCBCQueryResponseParse.java, v 0.1 Mar 27, 2018 14:55:00 PM kaiji.ykj Exp $\r\n */\r\npublic class OCBCQueryResponseParse extends TextMessageParser {\r\n\r\n    protected static final Logger logger          = LoggerFactory.getLogger(OCBCQueryResponseParse.class);\r\n    static final String HTTP_STATUS_CODE = \"_httpStatusCode\";\r\n\r\n\r\n    @Override\r\n    protected UnifyMessage parse(String s) {\r\n        UnifyCommonMessage unifyCommonMessage = new UnifyCommonMessage();\r\n        unifyCommonMessage.getCommonBody().addField(\"origPayload\", s);\r\n        String _httpStatusCode = this.getMessageEnvelope().getExtraContent().get(HTTP_STATUS_CODE);\r\n      \
    \  unifyCommonMessage.getCommonBody().addField(HTTP_STATUS_CODE, _httpStatusCode);\r\n        try {\r\n            JSONObject rootNode = JSONObject.fromObject(s);\r\n            // verifySignature(rootNode);\r\n            validateParameters(rootNode);\r\n            addResponse(unifyCommonMessage, rootNode);\r\n\r\n        } catch (SupergwException sgwe){\r\n            logger.error(\"error in parse\", sgwe);\r\n            CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n            compositeData.addField(\"resultCodeId\", sgwe.getErrorCode().getCode());\r\n            compositeData.addField(\"resultMsg\", sgwe.getMessage());\r\n            unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n\r\n\r\n        } catch (Exception e) {\r\n            logger.error(\"error in parse\", e);\r\n            CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n            compositeData.addField(\"resultCodeId\", ParserErrorCode.SYSTEM_ERROR.getCode());\r\
    \n            compositeData.addField(\"resultMsg\", e.getMessage());\r\n            unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n\r\n\r\n        } finally {\r\n            if(\"401\".equals(_httpStatusCode)) {\r\n                CompositeData resultInfoData = new CompositeData(\"resultInfo\");\r\n                resultInfoData.addField(\"resultStatus\", BizStatusCode.UNAUTHORIZED.getCode());\r\n                resultInfoData.addField(\"resultCode\", SuperGatewayResultCode.UNAUTHORIZED.getCode());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null,resultInfoData);\r\n            } else {\r\n                CompositeData resultInfoData = new CompositeData(\"resultInfo\");\r\n                resultInfoData.addField(\"resultStatus\", BizStatusCode.SUCCESS.getCode());\r\n                resultInfoData.addField(\"resultCode\", SuperGatewayResultCode.SUCCESS.getCode());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null,resultInfoData);\r\
    \n            }\r\n\r\n            return unifyCommonMessage;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * verify repsone signature\r\n     * @param jsonNode\r\n     */\r\n    private void verifySignature(JsonNode jsonNode){\r\n        boolean result = false;\r\n        try {\r\n            String certId = jsonNode.get(\"response\").get(\"head\").get(\"certId\").getTextValue();\r\n            KMSUtil kmsUtil = GroovyDependencyServicePackage.g(KMSUtil.class);\r\n            String publicKey = kmsUtil.getCert(certId+\"_SPI_KEY-pub-key\", \"PUBLIC_KEY\", null);\r\n\r\n            SignatureUtil signatureUtil = GroovyDependencyServicePackage.g(SignatureUtil.class);\r\n            result = signatureUtil.verify(jsonNode, publicKey, \"response\");\r\n\r\n        } catch (Exception e) {\r\n            throw new SupergwException(ParserErrorCode.VERIFY_ERROR, \"verify signature error \" + e.getMessage());\r\n        }\r\n\r\n        if (!result) {\r\n            throw new SupergwException(ParserErrorCode.VERIFY_ERROR,\
    \ \"invalid signature\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Validate the parameters from HTTP response\r\n     * @param rootNode the HTTP request parameters\r\n     */\r\n    private void validateParameters (JSONObject rootNode) {\r\n        JSONObject responseObject = rootNode.getJSONObject(\"response\");\r\n\r\n        JSONObject headObject = responseObject.getJSONObject(\"head\");\r\n        JSONObject bodyObject = responseObject.getJSONObject(\"body\");\r\n\r\n        // Mandatory parameters regardless of the transaction result\r\n        ArrayList<String> mandatoryParams = new ArrayList<>();\r\n        mandatoryParams.add(\"version\");\r\n        mandatoryParams.add(\"instId\");\r\n        mandatoryParams.add(\"certId\");\r\n        mandatoryParams.add(\"channelSystemId\");\r\n        mandatoryParams.add(\"bizType\");\r\n        mandatoryParams.add(\"transactionId\");\r\n        mandatoryParams.add(\"inquiredTransactionStatus\");\r\n\r\n        // Mandatory parameters\
    \ that only exist in successful transactions\r\n        if (bodyObject.get(\"inquiredTransactionStatus\") != null && \"0000\".equals(bodyObject.getString(\"inquiredTransactionStatus\"))) {\r\n            mandatoryParams.add(\"inquiredBankTransactionId\");\r\n            mandatoryParams.add(\"inquiredAmount\");\r\n        }\r\n\r\n        StringBuilder errorMessages = new StringBuilder(validateMandatoryParameters(rootNode, mandatoryParams));\r\n\r\n        // Validate other special paramters\r\n        if (!\"STQ\".equals(headObject.getString(\"bizType\"))) {\r\n            errorMessages.append(\"bizType must be \\\"STQ\\\".\");\r\n        }\r\n\r\n        if (!StringUtils.isBlank(bodyObject.getString(\"inquiredAmount\"))\r\n                && !bodyObject.getString(\"inquiredAmount\").matches(\"([1-9]\\\\d*)\")) {\r\n            errorMessages.append(\"inquiredAmount must be an integer.\");\r\n        }\r\n\r\n        // Set response code and error message\r\n        if (errorMessages.length()\
    \ > 0) {\r\n            throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, errorMessages.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the mandatory parameters\r\n     * @param rootNode the parameter values\r\n     * @param keys Array of mandatory parameters\r\n     * @return the resulting error messages\r\n     */\r\n    private String validateMandatoryParameters(JSONObject rootNode, List<String> keys) {\r\n\r\n        JsonSfUtil jsonSfUtil = GroovyDependencyServicePackage.g(JsonSfUtil.class);\r\n        JSONObject flattened = jsonSfUtil.flatten(rootNode);\r\n        StringBuilder errorMessages = new StringBuilder();\r\n\r\n        for (String key : keys) {\r\n            if (!flattened.has(key)) {\r\n                errorMessages.append(key).append(\" is missing or blank.\");\r\n            }\r\n        }\r\n\r\n\r\n        return errorMessages.toString();\r\n    }\r\n\r\n    /**\r\n     * convert external fileds to internal fileds\r\n     * @param\
    \ jsonObject\r\n     * @return\r\n     */\r\n    private void addResponse(UnifyCommonMessage unifyMsg, JSONObject jsonObject){\r\n        try {\r\n\r\n            JSONObject responseObject = jsonObject.getJSONObject(\"response\");\r\n\r\n            JSONObject headObject = responseObject.getJSONObject(\"head\");\r\n            JSONObject bodyObject = responseObject.getJSONObject(\"body\");\r\n\r\n            // Add the fields into UnifyMessage\r\n            SupergwMessage body = unifyMsg.getCommonBody();\r\n\r\n            body.addField(\"externalEventCode\", \"OCBCC1ID11.bankcard.query\");\r\n            body.addField(\"externalInterfaceId\", \"OCBCC1ID11.bankcard.query.request\");\r\n            body.addField(\"tntInstId\", \"DANAW3ID\");\r\n            body.addField(\"externalSerialNo\", bodyObject.getString(\"transactionId\"));\r\n            body.addField(\"externalSystemId\", \"OCBCC1ID11\");\r\n            body.addField(\"exchangeAmount\", bodyObject.optString(\"inquiredAmount\"\
    ));\r\n            body.addField(\"exchangeCurrency\", bodyObject.optString(\"inquiredCurrency\"));\r\n            body.addField(\"referenceNo\", bodyObject.optString(\"inquiredBankTransactionId\"));\r\n\r\n            for (Object key: bodyObject.keySet()) {\r\n                body.addField((String) key, (String) bodyObject.get(key));\r\n            }\r\n\r\n            CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n            compositeData.addField(\"resultCodeId\", bodyObject.getString(\"inquiredTransactionStatus\"));\r\n\r\n            UnifyCommonMessage origTransMsg = new UnifyCommonMessage();\r\n            origTransMsg.getCommonBody().addCompositeData(null, compositeData);\r\n            body.addField(\"origTransInfo\", origTransMsg.toJSonStr());\r\n            body.addCompositeData(null, compositeData);\r\n\r\n\r\n        } catch (Exception e){\r\n            throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, e);\r\n        }\r\n    }\r\
    \n\r\n\r\n\r\n    /**\r\n     * @see MessageParser#share(UnifyMessage, UnifyMessage)\r\n     */\r\n    @Override\r\n    public void share(UnifyMessage responseMessage, UnifyMessage requestMessage) {\r\n\r\n        UnifyCommonMessage unifyCommonMessage = (UnifyCommonMessage) responseMessage;\r\n\r\n        try {\r\n            String requestTransactionId = ((UnifyCommonMessage) requestMessage).getCommonBody().g(\"externalSerialNo\");\r\n            String origExchangeAmount = ((UnifyCommonMessage) requestMessage).getCommonBody().g(\"origExchangeAmount\");\r\n            String origExchangeCurrency = ((UnifyCommonMessage) requestMessage).getCommonBody().g(\"origExchangeCurrency\");\r\n\r\n            String responseTransactionId = ((UnifyCommonMessage) responseMessage).getCommonBody().g(\"transactionId\");\r\n            String exchangeAmount = ((UnifyCommonMessage) responseMessage).getCommonBody().g(\"exchangeAmount\");\r\n            String exchangeCurrency = ((UnifyCommonMessage) responseMessage).getCommonBody().g(\"\
    exchangeCurrency\");\r\n\r\n            if (StringUtils.isBlank(exchangeAmount)) {\r\n                unifyCommonMessage.getCommonBody().addField(\"exchangeAmount\", origExchangeAmount);\r\n            } else {\r\n                logger.info(\"exchange amount is not blank: \" + exchangeAmount);\r\n                unifyCommonMessage.getCommonBody().addField(\"exchangeAmount\", exchangeAmount + \"00\");\r\n            }\r\n\r\n            if (StringUtils.isBlank(exchangeCurrency)) {\r\n                unifyCommonMessage.getCommonBody().addField(\"exchangeCurrency\", origExchangeCurrency);\r\n            }\r\n\r\n            if (responseTransactionId == null || !responseTransactionId.equals(requestTransactionId)) {\r\n                throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, \"transactionId in request and response do not match.\");\r\n            }\r\n\r\n        } catch (SupergwException sgwe) {\r\n            logger.error(\"error in share\", sgwe);\r\n            if\
    \ (unifyCommonMessage.getCommonBody().go(\"externalResultInfo\") == null) {\r\n                CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n                compositeData.addField(\"resultCodeId\", sgwe.getErrorCode().getCode());\r\n                compositeData.addField(\"resultMsg\", sgwe.getMessage());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n            }\r\n\r\n\r\n        } catch (Exception e) {\r\n            logger.error(\"error in share\", e);\r\n            if (unifyCommonMessage.getCommonBody().go(\"externalResultInfo\") == null) {\r\n                CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n                compositeData.addField(\"resultCodeId\", ParserErrorCode.SYSTEM_ERROR.getCode());\r\n                compositeData.addField(\"resultMsg\", e.getMessage());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n\
    \            }\r\n        }\r\n    }\r\n\r\n}", validate_template: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xml>\r\n    <field class=\"String\" name=\"externalSerialNo\"  note=\"externalSerialNo\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n        <validator name=\"length\">\r\n            <param name=\"maxLength\">32</param>\r\n            <message>${note} maxLength is ${maxLength}</message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"String\" name=\"externalMessageSendTime\" note=\"externalMessageSendTime\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n        <validator name=\"date\">\r\n            <param name=\"format\">yyyyMMddHHmmss</param>\r\n            <message>${note} invalid format, should be ${format} </message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"\
    String\" name=\"origExternalSerialNo\" note=\"origExternalSerialNo\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"String\" name=\"transType\" note=\"transType\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"String\" name=\"registrationExtInfo.certId\" note=\"registrationExtInfo.certId\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n    </field>\r\n\r\n</xml>"}
- {assemble_ext_template: '', assemble_sub_template: '', assemble_template: "#set($l=$!m.g('exchangeAmount').length() - 2)\r\n#set($amount=$!m.g('exchangeAmount').substring(0, $l))\r\n#set($token=$!m.g(\"payerCardCacheToken\"))\r\n#set($cardInfo=$!cardCenterUtil.queryCardInfoByToken($token))\r\n#set($bankCardType=$!cardInfo.cardType)\r\n#set($bankCardNo=$!cardInfo.cardNo)\r\n#set($expiryYear=$!cardInfo.extendInfo.cardExpireYear)\r\n#set($expiryMonth=$!cardInfo.extendInfo.cardExpireMonth)\r\n#set($payerCardIndex=$!m.g('payerCardIndex'))\r\n#set($userId=$!m.g('ipRoleId'))\r\n#set($assetCard=$!assetCardUtil.queryAssetCard($!userId,$!payerCardIndex))\r\n#set($cardToken=$assetCard.getExtInfo().get(\"BANK_TOKEN\"))\r\n##\r\n#if($sensitive==\"true\")\r\n#set($bankCardNo=\"*********\")\r\n#set($expiryYear=\"****\")\r\n#set($expiryMonth=\"**\")\r\n#end\r\n##\r\n##\r\n#set($certId=$!m.g('registrationExtInfo.certId'))\r\n#set($payload=$jsonSfUtil.getJsonObject())\r\n#set($request=$jsonSfUtil.getJsonObject())\r\
    \n#set($head=$jsonSfUtil.getJsonObject())\r\n#set($body=$jsonSfUtil.getJsonObject())\r\n#set($dummy=$head.put(\"version\", \"1.0.0\"))\r\n#set($dummy=$head.put(\"instId\", \"DANA\"))\r\n#set($dummy=$head.put(\"certId\", $certId))\r\n#set($dummy=$head.put(\"channelSystemId\", $!m.g(\"instId\")))\r\n#set($dummy=$head.put(\"bizType\", \"CP\"))\r\n#set($dummy=$body.put(\"transactionId\", $!m.g(\"externalSerialNo\")))\r\n#set($dummy=$body.put(\"transactionTime\", $!m.g(\"externalMessageSendTime\")))\r\n#set($dummy=$body.put(\"amount\", $!amount))\r\n#set($dummy=$body.put(\"currency\", $!m.g(\"exchangeCurrency\")))\r\n#set($dummy=$body.put(\"installmentPeriod\", \"\"))\r\n#set($dummy=$body.put(\"bankCardToken\", $cardToken))\r\n#set($dummy=$body.put(\"extension\", \"\"))\r\n##\r\n#set($dummy=$request.put(\"head\",$head))\r\n#set($dummy=$request.put(\"body\",$body))\r\n#set($dummy=$payload.put(\"request\",$request))\r\n#set($dummy=$payload.put(\"signature\",''))\r\n$!payload.toString()", assemble_type: TEXT,
  error_sub_template: '', error_template: '', header_template: "#set($appInterfaceMap=$supergwConfigUtil.getAppInterfaceMap($!m.g(\"appId\"), $!m.g(\"interfaceId\"), $!m.g(\"tntInstId\")))\r\n#set($communicationConfig=$supergwConfigUtil.getCommunicationConfig($appInterfaceMap.getCommunicaionId()))\r\n#set($uriString=$communicationConfig.getUri().getUrl())\r\n#set($path=$urlUtil.getURIObject($!uriString).getPath())\r\n#set($httpMethod='POST')\r\n#set($accessToken=$!m.g('accessToken'))\r\n#set($apiKey=$!kmsUtil.getCert(\"OCBC_PAYMENT_API_KEY-sec-key\",\"SYMMETRIC_KEY\",null))\r\n#set($apiSecret=$!kmsUtil.getCert(\"OCBC_PAYMENT_API_SECRET-sec-key\",\"SYMMETRIC_KEY\",null))\r\n#set($timestamp=$!commonDateUtil.getTimestampWithTimezoneFromUnimsg2())\r\n#set($timestamp2=$!commonDateUtil.transformDate($timestamp, \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ssXXX\"))\r\n#set($nonce=$!coderUtil.base64Encode($!dateUtil.getCurrentTimeMillis()))\r\n#set($hexPayload=$signatureUtil.digestHexSHA256($payload.toString()).toLowerCase())\r\
    \n#set($stringToSign=\"${nonce}:${apiKey}:${httpMethod}:${path}:${accessToken}:${hexPayload}:${timestamp2}\")\r\n#set($hmacValue=$signatureUtil.signWithHMACHex($stringToSign,$apiSecret))\r\n#set($signature=\"${apiKey}:${hmacValue}:${nonce}:${timestamp2}\")\r\n<xml>\r\n    <map name=\"Authorization\">Bearer $!accessToken</map>\r\n    <map name=\"content-type\">application/json</map>\r\n    <map name=\"X-OCBC-APIKey\">$!apiKey</map>\r\n    <map name=\"X-OCBC-Timestamp\">$!timestamp2</map>\r\n    <map name=\"X-OCBC-Signature\">$signatureUtil.encodeBase64($!signature)</map>\r\n    <map name=\"charset\">UTF-8</map>\r\n</xml>", message_process_id: OCBCC1ID11_BANKCARD_PAYMENT_REQUEST, parser_class_name: OCBCPaymentResponseParse, parser_template: "/*\r\n  Alipay.com Inc.\r\n  Copyright (c) 2004-2017 All Rights Reserved.\r\n */\r\npackage com.alipay.fc.supergw.servicetest.groovy;\r\n\r\nimport com.alipay.fc.supergw.common.util.enums.SuperGatewayResultCode;\r\nimport com.alipay.fc.supergw.core.service.extension.common.GroovyDependencyServicePackage;\r\
    \nimport com.alipay.fc.supergw.core.service.extension.common.JsonSfUtil;\r\nimport com.alipay.fc.supergw.core.service.extension.common.KMSUtil;\r\nimport com.alipay.fc.supergw.core.service.extension.common.SignatureUtil;\r\nimport com.alipay.supergwlite.components.common.exception.SupergwException;\r\nimport com.alipay.supergwlite.components.common.message.CompositeData;\r\nimport com.alipay.supergwlite.components.common.message.SupergwMessage;\r\nimport com.alipay.supergwlite.components.message.exception.code.ParserErrorCode;\r\nimport com.alipay.supergwlite.components.message.parser.MessageParser;\r\nimport com.alipay.supergwlite.components.message.parser.TextMessageParser;\r\nimport com.alipay.supergwlite.components.unimsg.UnifyCommonMessage;\r\nimport com.alipay.supergwlite.components.unimsg.UnifyMessage;\r\nimport com.alipay.supergwlite.components.unimsg.constant.BizStatusCode;\r\nimport net.sf.json.JSONObject;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.codehaus.jackson.JsonNode;\r\
    \nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * parser for the response of direct debit OCBC payment\r\n *\r\n * *\r\n * {\r\n \"response\":{\r\n \"head\":{\r\n \"version\":\"1.0.0\",\r\n \"instId\":\"DANA\",\r\n \"certId\":\"1234567890\",\r\n \"channelSystemId\":\"BANK01\",\r\n \"bizType\":\"CP\"\r\n },\r\n \"body\":{\r\n \"transactionId\":\"20171101000000002\",\r\n \"transactionTime\":\"20171102103028\",\r\n \"bankTransactionId\":\"2017110137898657\",\r\n \"bankCardNo\":\"1234567890\",\r\n \"resultStatus\":\"00\",\r\n \"errorCode\":\"0000\",\r\n \"desc\":\"payment success\",\r\n \"transactionAcceptedTime\":\"2017110113:26:46\",\r\n \"amount\":\"888888000\",\r\n \"currency\":\"IDR\",\r\n \"installmentPeriod\":\"3\",\r\n \"extension\":\"\"\r\n }\r\n },\r\n \"signature\":\"signature string\"\r\n }\r\n *\r\n *\r\n *\r\n * @author hongyuan.why\r\n * @version $Id: OCBCPaymentResponseParse.java, v\
    \ 0.1 Dec 17, 2017 9:57:00 PM hongyuan.why Exp $\r\n */\r\npublic class OCBCPaymentResponseParse extends TextMessageParser {\r\n\r\n    protected static final Logger logger          = LoggerFactory.getLogger(OCBCPaymentResponseParse.class);\r\n    static final String HTTP_STATUS_CODE = \"_httpStatusCode\";\r\n\r\n\r\n    @Override\r\n    protected UnifyMessage parse(String s) {\r\n        \r\n        UnifyCommonMessage unifyCommonMessage = new UnifyCommonMessage();\r\n        unifyCommonMessage.getCommonBody().addField(\"origPayload\", s);\r\n        String _httpStatusCode = this.getMessageEnvelope().getExtraContent().get(HTTP_STATUS_CODE);\r\n        unifyCommonMessage.getCommonBody().addField(HTTP_STATUS_CODE, _httpStatusCode);\r\n        try {\r\n            JSONObject rootNode = JSONObject.fromObject(s);\r\n            // verifySignature(rootNode);\r\n            validateParameters(rootNode);\r\n            addResponse(unifyCommonMessage, rootNode);\r\n\r\n        } catch (SupergwException\
    \ sgwe){\r\n            logger.error(\"error in parse\", sgwe);\r\n            CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n            compositeData.addField(\"resultCodeId\", sgwe.getErrorCode().getCode());\r\n            compositeData.addField(\"resultMsg\", sgwe.getMessage());\r\n            unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n\r\n\r\n        } catch (Exception e) {\r\n            logger.error(\"error in parse\", e);\r\n            CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n            compositeData.addField(\"resultCodeId\", ParserErrorCode.SYSTEM_ERROR.getCode());\r\n            compositeData.addField(\"resultMsg\", e.getMessage());\r\n            unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n\r\n\r\n        } finally {\r\n            if(\"401\".equals(_httpStatusCode)) {\r\n                CompositeData resultInfoData = new CompositeData(\"resultInfo\"\
    );\r\n                resultInfoData.addField(\"resultStatus\", BizStatusCode.UNAUTHORIZED.getCode());\r\n                resultInfoData.addField(\"resultCode\", SuperGatewayResultCode.UNAUTHORIZED.getCode());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null,resultInfoData);\r\n            } else {\r\n                CompositeData resultInfoData = new CompositeData(\"resultInfo\");\r\n                resultInfoData.addField(\"resultStatus\", BizStatusCode.SUCCESS.getCode());\r\n                resultInfoData.addField(\"resultCode\", SuperGatewayResultCode.SUCCESS.getCode());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null,resultInfoData);\r\n            }\r\n\r\n            return unifyCommonMessage;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * verify repsone signature\r\n     * @param jsonNode\r\n     */\r\n    private void verifySignature(JsonNode jsonNode){\r\n        boolean result = false;\r\n        try {\r\n    \
    \        String certId = jsonNode.get(\"response\").get(\"head\").get(\"certId\").getTextValue();\r\n            KMSUtil kmsUtil = GroovyDependencyServicePackage.g(KMSUtil.class);\r\n            String publicKey = kmsUtil.getCert(certId+\"_SPI_KEY-pub-key\", \"PUBLIC_KEY\", null);\r\n\r\n            SignatureUtil signatureUtil = GroovyDependencyServicePackage.g(SignatureUtil.class);\r\n            result = signatureUtil.verify(jsonNode, publicKey, \"response\");\r\n\r\n        } catch (Exception e) {\r\n            throw new SupergwException(ParserErrorCode.VERIFY_ERROR, \"verify signature error \" + e.getMessage());\r\n        }\r\n\r\n        if (!result) {\r\n            throw new SupergwException(ParserErrorCode.VERIFY_ERROR, \"invalid signature\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Validate the parameters from HTTP response\r\n     * @param rootNode the HTTP request parameters\r\n     */\r\n    private void validateParameters (JSONObject rootNode) {\r\n        JSONObject\
    \ responseObject = rootNode.getJSONObject(\"response\");\r\n\r\n        JSONObject headObject = responseObject.getJSONObject(\"head\");\r\n        JSONObject bodyObject = responseObject.getJSONObject(\"body\");\r\n\r\n        // Mandatory parameters regardless of the transaction result\r\n        ArrayList<String> mandatoryParams = new ArrayList<>();\r\n        mandatoryParams.add(\"version\");\r\n        mandatoryParams.add(\"instId\");\r\n        mandatoryParams.add(\"certId\");\r\n        mandatoryParams.add(\"channelSystemId\");\r\n        mandatoryParams.add(\"bizType\");\r\n        mandatoryParams.add(\"transactionId\");\r\n        mandatoryParams.add(\"transactionTime\");\r\n        mandatoryParams.add(\"amount\");\r\n        mandatoryParams.add(\"resultStatus\");\r\n        mandatoryParams.add(\"errorCode\");\r\n\r\n        // Mandatory parameters that only exist in successful transactions\r\n        if (bodyObject.get(\"resultStatus\") != null && \"00\".equals(bodyObject.getString(\"\
    resultStatus\"))) {\r\n            mandatoryParams.add(\"bankTransactionId\");\r\n        }\r\n\r\n        StringBuilder errorMessages = new StringBuilder(validateMandatoryParameters(rootNode, mandatoryParams));\r\n\r\n        // Validate other special paramters\r\n        if (!\"CP\".equals(headObject.optString(\"bizType\"))) {\r\n            errorMessages.append(\"bizType must be \\\"CP\\\".\");\r\n        }\r\n\r\n        if (bodyObject.get(\"amount\") == null || StringUtils.isBlank(bodyObject.optString(\"amount\"))\r\n                || !bodyObject.optString(\"amount\").matches(\"([1-9]\\\\d*)\")) {\r\n            errorMessages.append(\"amount must be an integer.\");\r\n        }\r\n\r\n        // Set response code and error message\r\n        if (errorMessages.length() > 0) {\r\n            throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, errorMessages.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the mandatory parameters\r\n     * @param rootNode\
    \ the parameter values\r\n     * @param keys Array of mandatory parameters\r\n     * @return the resulting error messages\r\n     */\r\n    private String validateMandatoryParameters(JSONObject rootNode, List<String> keys) {\r\n\r\n        JsonSfUtil jsonSfUtil = GroovyDependencyServicePackage.g(JsonSfUtil.class);\r\n        JSONObject flattened = jsonSfUtil.flatten(rootNode);\r\n        StringBuilder errorMessages = new StringBuilder();\r\n\r\n        for (String key : keys) {\r\n            if (!flattened.has(key)) {\r\n                errorMessages.append(key).append(\" is missing or blank.\");\r\n            }\r\n        }\r\n\r\n        return errorMessages.toString();\r\n    }\r\n\r\n    /**\r\n     * convert external fileds to internal fileds\r\n     * @param unifyMsg\r\n     * @param jsonObject\r\n     * @return\r\n     */\r\n    private void addResponse(UnifyCommonMessage unifyMsg, JSONObject jsonObject){\r\n\r\n        try {\r\n\r\n            JSONObject responseObject = jsonObject.getJSONObject(\"\
    response\");\r\n\r\n            JSONObject headObject = responseObject.getJSONObject(\"head\");\r\n            JSONObject bodyObject = responseObject.getJSONObject(\"body\");\r\n\r\n            // Add the fields into UnifyMessage\r\n            SupergwMessage body = unifyMsg.getCommonBody();\r\n\r\n            body.addField(\"externalEventCode\", \"OCBCC1ID11.bankcard.payment\");\r\n            body.addField(\"externalInterfaceId\", \"OCBCC1ID11.bankcard.payment.request\");\r\n            body.addField(\"tntInstId\", \"DANAW3ID\");\r\n            body.addField(\"externalSerialNo\", bodyObject.getString(\"transactionId\"));\r\n            body.addField(\"externalSystemId\", \"OCBCC1ID11\");\r\n            body.addField(\"exchangeAmount\", bodyObject.getString(\"amount\") + \"00\");\r\n            body.addField(\"exchangeCurrency\", bodyObject.getString(\"currency\"));\r\n            body.addField(\"referenceNo\", bodyObject.optString(\"bankTransactionId\"));\r\n\r\n\r\n            for\
    \ (Object key: bodyObject.keySet()) {\r\n                body.addField((String) key, (String) bodyObject.get(key));\r\n            }\r\n\r\n\r\n            CompositeData externalResultInfo = new CompositeData(\"externalResultInfo\");\r\n            externalResultInfo.addField(\"resultCodeId\", bodyObject.getString(\"errorCode\"));\r\n            externalResultInfo.addField(\"resultStatus\", bodyObject.getString(\"resultStatus\"));\r\n            externalResultInfo.addField(\"resultMsg\", bodyObject.optString(\"desc\"));\r\n\r\n            body.addCompositeData(null, externalResultInfo);\r\n\r\n        } catch (Exception e){\r\n            throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, e);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @see MessageParser#share(UnifyMessage, UnifyMessage)\r\n     */\r\n    @Override\r\n    public void share(UnifyMessage responseMessage, UnifyMessage requestMessage) {\r\n\r\n        UnifyCommonMessage unifyCommonMessage = (UnifyCommonMessage)responseMessage;\r\
    \n\r\n        try {\r\n            String requestTransactionId = ((UnifyCommonMessage)requestMessage).getCommonBody().g(\"externalSerialNo\");\r\n            String responseTransactionId = ((UnifyCommonMessage)responseMessage).getCommonBody().g(\"transactionId\");\r\n\r\n            if (responseTransactionId == null || !responseTransactionId.equals(requestTransactionId)) {\r\n                throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, \"transactionId in request and response do not match.\");\r\n            }\r\n\r\n            String requestAmount = ((UnifyCommonMessage)requestMessage).getCommonBody().g(\"exchangeAmount\");\r\n            String responseAmount = ((UnifyCommonMessage)responseMessage).getCommonBody().g(\"exchangeAmount\");\r\n\r\n            if (responseAmount == null || !responseAmount.equals(requestAmount)) {\r\n                throw new SupergwException(ParserErrorCode.ILLEGAL_PARAMETER, \"amount in request and response do not match.\");\r\n      \
    \      }\r\n\r\n        } catch (SupergwException sgwe){\r\n            logger.error(\"error in share\", sgwe);\r\n            if(unifyCommonMessage.getCommonBody().go(\"externalResultInfo\") == null) {\r\n                CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n                compositeData.addField(\"resultCodeId\", sgwe.getErrorCode().getCode());\r\n                compositeData.addField(\"resultMsg\", sgwe.getMessage());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n            }\r\n\r\n\r\n        } catch (Exception e) {\r\n            logger.error(\"error in share\", e);\r\n            if(unifyCommonMessage.getCommonBody().go(\"externalResultInfo\") == null) {\r\n                CompositeData compositeData = new CompositeData(\"externalResultInfo\");\r\n                compositeData.addField(\"resultCodeId\", ParserErrorCode.SYSTEM_ERROR.getCode());\r\n                compositeData.addField(\"\
    resultMsg\", e.getMessage());\r\n                unifyCommonMessage.getCommonBody().addCompositeData(null, compositeData);\r\n            }\r\n        }\r\n    }\r\n\r\n}", validate_template: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xml>\r\n    <field class=\"String\" name=\"externalSerialNo\"  note=\"externalSerialNo\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n        <validator name=\"length\">\r\n            <param name=\"maxLength\">32</param>\r\n            <message>${note} maxLength is ${maxLength}</message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"String\" name=\"externalMessageSendTime\" note=\"externalMessageSendTime\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n        <validator name=\"date\">\r\n            <param name=\"format\">yyyyMMddHHmmss</param>\r\n         \
    \   <message>${note} invalid format, should be ${format} </message>\r\n        </validator>\r\n    </field>\r\n    <field  class=\"String\" name=\"exchangeAmount\" note=\"exchangeAmount\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n        <validator name=\"money\">\r\n            <param name=\"greaterThanOrEqualTo\">100</param>\r\n            <message>${note} must greater than ${greaterThanOrEqualTo}</message>\r\n        </validator>\r\n        <validator name=\"regex\">\r\n            <param name=\"expression\">^[1-9]\\d*$</param>\r\n            <message>>${note} invalid number format</message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"String\" name=\"exchangeCurrency\" note=\"exchangeCurrency\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n        <validator name=\"equal\">\r\n        \
    \    <param name=\"value\">IDR</param>\r\n            <message>${note} must be ${value}</message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"String\" name=\"payerCardCacheToken\" note=\"payerCardCacheToken\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"String\" name=\"payerCardIndex\" note=\"payerCardIndex\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"String\" name=\"ipRoleId\" note=\"ipRoleId\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can not be empty</message>\r\n        </validator>\r\n    </field>\r\n    <field class=\"String\" name=\"registrationExtInfo.certId\" note=\"registrationExtInfo.certId\">\r\n        <validator name=\"requiredstring\">\r\n            <message>${note} can\
    \ not be empty</message>\r\n        </validator>\r\n    </field>\r\n\r\n</xml>"}
route_rule:
- {id: DEFAULT.BANKCARD.VERIFY, name: DEFAULT.BANKCARD.VERIFY, route_space_id: SPACE_FLUX_EVENT_ROUTER, rule_type: BANKCARD.VERIFY, status: Y}
route_rule_attribute:
- {attr_key: SPA_SERVICE_ID, attr_value: VERIFY, route_rule_id: DEFAULT.BANKCARD.VERIFY}
- {attr_key: SPA_BIZ_PATTERN_ID, attr_value: BANKCARD, route_rule_id: DEFAULT.BANKCARD.VERIFY}
